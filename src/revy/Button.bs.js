// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as S from "./S.bs.js";
import * as React from "react";
import * as ReactNative from "react-native";

var base_0 = S.borderRadius(/* medium */-20425611);

var base_1 = {
  hd: S.borderStyle(/* solid */12956715),
  tl: {
    hd: S.borderWidth(3),
    tl: /* [] */0
  }
};

var base = {
  hd: base_0,
  tl: base_1
};

function make(variant, size, outline) {
  var match;
  switch (size) {
    case /* Small */0 :
        match = [
          1,
          /* half */-989320781,
          /* single */958490248
        ];
        break;
    case /* Medium */1 :
        match = [
          2,
          /* single */958490248,
          /* double */852175633
        ];
        break;
    case /* Large */2 :
        match = [
          3,
          /* double */852175633,
          /* triple */-892289378
        ];
        break;
    
  }
  var match$1;
  switch (variant) {
    case /* Error */0 :
        match$1 = outline ? [
            /* transparent */582626130,
            /* error */-215364664,
            /* body */-1055163742
          ] : [
            /* error */-215364664,
            /* error */-215364664,
            /* error */-215364664
          ];
        break;
    case /* Warning */1 :
        match$1 = outline ? [
            /* transparent */582626130,
            /* warning */164354652,
            /* body */-1055163742
          ] : [
            /* warning */164354652,
            /* warning */164354652,
            /* warning */164354652
          ];
        break;
    case /* Success */2 :
        match$1 = outline ? [
            /* transparent */582626130,
            /* success */944645571,
            /* body */-1055163742
          ] : [
            /* success */944645571,
            /* success */944645571,
            /* success */944645571
          ];
        break;
    case /* Primary */3 :
        match$1 = outline ? [
            /* transparent */582626130,
            /* primary */58474434,
            /* body */-1055163742
          ] : [
            /* primary */58474434,
            /* primary */58474434,
            /* body */-1055163742
          ];
        break;
    case /* Secondary */4 :
        match$1 = outline ? [
            /* transparent */582626130,
            /* secondary */-499495052,
            /* body */-1055163742
          ] : [
            /* secondary */-499495052,
            /* secondary */-499495052,
            /* secondary */-499495052
          ];
        break;
    
  }
  var text = S.make({
        hd: S.fontWeight(/* _700 */1056254712),
        tl: {
          hd: S.fontSize(match[0]),
          tl: {
            hd: S.color(undefined, undefined, match$1[2]),
            tl: /* [] */0
          }
        }
      });
  var btn = S.make({
        hd: S.backgroundColor(match$1[0]),
        tl: {
          hd: S.borderColor(match$1[1]),
          tl: {
            hd: S.padding2(match[1], match[2]),
            tl: base
          }
        }
      });
  return [
          text,
          btn
        ];
}

var Styles = {
  base: base,
  make: make
};

function Button(Props) {
  var onPress = Props.onPress;
  var disabledOpt = Props.disabled;
  var variantOpt = Props.variant;
  var sizeOpt = Props.size;
  var outlineOpt = Props.outline;
  var children = Props.children;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var variant = variantOpt !== undefined ? variantOpt : /* Secondary */4;
  var size = sizeOpt !== undefined ? sizeOpt : /* Medium */1;
  var outline = outlineOpt !== undefined ? outlineOpt : false;
  var match = make(variant, size, outline);
  var textStyle = match[0];
  console.log("textStyle", textStyle);
  return React.createElement(ReactNative.TouchableOpacity, {
              activeOpacity: 0.8,
              style: match[1],
              disabled: disabled,
              onPress: onPress,
              children: React.createElement(ReactNative.Text, {
                    style: textStyle,
                    children: children
                  })
            });
}

function Button$Round(Props) {
  var onPress = Props.onPress;
  var disabledOpt = Props.disabled;
  var variantOpt = Props.variant;
  var sizeOpt = Props.size;
  var outlineOpt = Props.outline;
  var children = Props.children;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var variant = variantOpt !== undefined ? variantOpt : /* Secondary */4;
  var size = sizeOpt !== undefined ? sizeOpt : /* Medium */1;
  var outline = outlineOpt !== undefined ? outlineOpt : false;
  var match = make(variant, size, outline);
  return React.createElement(ReactNative.TouchableOpacity, {
              activeOpacity: 0.8,
              style: match[1],
              disabled: disabled,
              onPress: onPress,
              children: React.createElement(ReactNative.Text, {
                    style: match[0],
                    children: children
                  })
            });
}

var Round = {
  make: Button$Round
};

var make$1 = Button;

export {
  Styles ,
  make$1 as make,
  Round ,
  
}
/* base Not a pure module */
