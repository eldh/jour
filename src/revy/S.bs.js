// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core from "./Core.bs.js";
import * as List from "bs-platform/lib/es6/list.mjs";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Js_dict from "bs-platform/lib/es6/js_dict.mjs";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";

function string_of_float(prim) {
  return prim.toString();
}

function string_of_int(prim) {
  return prim.toString();
}

function string_of_length(x) {
  if (typeof x === "string") {
    return "0";
  }
  var variant = x.NAME;
  if (variant === "vmax") {
    return x.VAL.toString() + "vmax";
  }
  if (variant === "vmin") {
    return x.VAL.toString() + "vmin";
  }
  if (variant === "percent") {
    return x.VAL.toString() + "%";
  }
  if (variant === "ch") {
    return x.VAL.toString() + "ch";
  }
  if (variant === "cm") {
    return x.VAL.toString() + "cm";
  }
  if (variant === "em") {
    return x.VAL.toString() + "em";
  }
  if (variant === "ex") {
    return x.VAL.toString() + "ex";
  }
  if (variant === "mm") {
    return x.VAL.toString() + "mm";
  }
  if (variant === "pt") {
    return x.VAL.toString() + "pt";
  }
  if (variant === "px") {
    return x.VAL.toString() + "px";
  }
  if (variant === "vh") {
    return x.VAL.toString() + "vh";
  }
  if (variant === "vw") {
    return x.VAL.toString() + "vw";
  }
  if (variant === "rem") {
    return x.VAL.toString() + "rem";
  }
  var match = x.VAL;
  if (match[0] === "sub") {
    return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
  }
}

function string_of_rgb(r, g, b) {
  return "rgb(" + (r.toString() + (", " + (g.toString() + (", " + (b.toString() + ")")))));
}

function string_of_rgba(r, g, b, a) {
  if (a === 1) {
    return string_of_rgb(r, g, b);
  } else {
    return "rgba(" + (r.toString() + (", " + (g.toString() + (", " + (b.toString() + (", " + (a.toString() + ")")))))));
  }
}

function string_of_p3(r, g, b, a) {
  return "color(display-p3 " + (r.toString() + (" " + (g.toString() + (" " + (b.toString() + (
                    a === 1 ? ")" : " / " + (a.toString() + ")")
                  ))))));
}

function string_of_color(highlight, tint, c) {
  if (typeof c === "string") {
    return "transparent";
  }
  var variant = c.NAME;
  if (variant === "p3") {
    var match = c.VAL;
    return string_of_p3(match[0], match[1], match[2], match[3]);
  }
  if (variant === "rgb") {
    var match$1 = c.VAL;
    return string_of_rgb(match$1[0], match$1[1], match$1[2]);
  }
  var match$2 = c.VAL;
  return string_of_rgba(match$2[0], match$2[1], match$2[2], match$2[3]);
}

function string_of_size(x) {
  if (typeof x === "string") {
    return "auto";
  }
  var variant = x.NAME;
  if (variant === "px") {
    return x.VAL;
  } else if (variant === "pct") {
    return x.VAL.toString() + "%";
  } else {
    return Core.Styles.getSpace(undefined, undefined, {
                NAME: "number",
                VAL: x.VAL
              });
  }
}

function space(prim) {
  return prim;
}

function dp(v) {
  return v;
}

function bool(prim) {
  return prim;
}

function offset(width, height) {
  return {
          height: height,
          width: width
        };
}

var Values = {
  string_of_float: string_of_float,
  string_of_int: string_of_int,
  string_of_length: string_of_length,
  string_of_rgb: string_of_rgb,
  string_of_rgba: string_of_rgba,
  string_of_p3: string_of_p3,
  string_of_color: string_of_color,
  string_of_size: string_of_size,
  size: string_of_size,
  space: space,
  color: string_of_color,
  dp: dp,
  bool: bool,
  offset: offset
};

function l(v) {
  return Caml_option.some(Js_dict.fromList(v));
}

function o(k, v) {
  var obj = {};
  obj[k] = v;
  return Caml_option.some(obj);
}

function op(k, fn, v) {
  if (v === undefined) {
    return ;
  }
  var obj = {};
  obj[k] = Curry._1(fn, Caml_option.valFromOption(v));
  return Caml_option.some(obj);
}

function shadowOffset(param) {
  return o("shadowOffset", {
              height: param[1],
              width: param[0]
            });
}

function fontWeight(v) {
  return o("fontWeight", v === "normal" ? "normal" : (
                v === "_100" ? "100" : (
                    v === "_200" ? "200" : (
                        v === "_300" ? "300" : (
                            v === "_400" ? "400" : (
                                v === "_500" ? "500" : (
                                    v === "_600" ? "600" : (
                                        v === "_700" ? "700" : (
                                            v === "_800" ? "800" : (
                                                v === "_900" ? "900" : "bold"
                                              )
                                          )
                                      )
                                  )
                              )
                          )
                      )
                  )
              ));
}

function includeFontPadding(v) {
  return o("includeFontPadding", v);
}

function letterSpacing(v) {
  return o("letterSpacing", v);
}

function lineHeight(v) {
  return o("lineHeight", v);
}

function textShadowRadius(v) {
  return o("textShadowRadius", v);
}

function textDecorationColor(v) {
  var arg = Core.Styles.getColor;
  return o("textDecorationColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function textShadowColor(v) {
  var arg = Core.Styles.getColor;
  return o("textShadowColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderBottomColor(v) {
  var arg = Core.Styles.getColor;
  return o("borderBottomColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderColor(v) {
  var arg = Core.Styles.getColor;
  return o("borderColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderEndColor(v) {
  var arg = Core.Styles.getColor;
  return o("borderEndColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderLeftColor(v) {
  var arg = Core.Styles.getColor;
  return o("borderLeftColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderRightColor(v) {
  var arg = Core.Styles.getColor;
  return o("borderRightColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderStartColor(v) {
  var arg = Core.Styles.getColor;
  return o("borderStartColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderTopColor(v) {
  var arg = Core.Styles.getColor;
  return o("borderTopColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function borderStyle(v) {
  return o("borderStyle", v === "dashed" ? "dashed" : (
                v === "dotted" ? "dotted" : "solid"
              ));
}

function shadowColor(v) {
  var arg = Core.Styles.getColor;
  return o("shadowColor", string_of_color(undefined, undefined, Curry._3(arg, undefined, undefined, v)));
}

function shadowOpacity(v) {
  return o("shadowOpacity", v);
}

function shadowRadius(v) {
  return o("shadowRadius", v);
}

function borderBottomEndRadius(v) {
  return o("borderBottomEndRadius", v);
}

function borderBottomLeftRadius(v) {
  return o("borderBottomLeftRadius", v);
}

function borderBottomRightRadius(v) {
  return o("borderBottomRightRadius", v);
}

function borderBottomStartRadius(v) {
  return o("borderBottomStartRadius", v);
}

function borderTopEndRadius(v) {
  return o("borderTopEndRadius", v);
}

function borderTopLeftRadius(v) {
  return o("borderTopLeftRadius", v);
}

function borderTopRightRadius(v) {
  return o("borderTopRightRadius", v);
}

function borderTopStartRadius(v) {
  return o("borderTopStartRadius", v);
}

function elevation(v) {
  return o("elevation", v);
}

function resizeMode(v) {
  return {
          resizeMode: v
        };
}

function fontFamily(v) {
  return o("fontFamily", Core.Styles.getFontFamily(v));
}

function direction(v) {
  return o("direction", v === "ltr" ? "ltr" : (
                v === "rtl" ? "rtl" : "inherit"
              ));
}

function display(v) {
  return o("display", v === "none" ? "none" : "flex");
}

function zIndex(v) {
  return o("zIndex", v);
}

function borderWidth(v) {
  return o("borderWidth", v);
}

function opacity(v) {
  return o("opacity", v);
}

function aspectRatio(v) {
  return o("aspectRatio", v);
}

function fontSize(v) {
  return o("fontSize", Core.Styles.getFontSize(v));
}

function borderEndWidth(v) {
  return o("borderEndWidth", v);
}

function borderStartWidth(v) {
  return o("borderStartWidth", v);
}

function borderRightWidth(v) {
  return o("borderRightWidth", v);
}

function borderTopWidth(v) {
  return o("borderTopWidth", v);
}

function borderLeftWidth(v) {
  return o("borderLeftWidth", v);
}

function borderBottomWidth(v) {
  return o("borderBottomWidth", v);
}

function flexDirection(v) {
  return o("flexDirection", v === "row" ? "row" : (
                v === "columnReverse" ? "columnReverse" : (
                    v === "rowReverse" ? "rowReverse" : "column"
                  )
              ));
}

function flex(v) {
  return o("flex", v);
}

function flexShrink(v) {
  return o("flexShrink", v);
}

function flexGrow(v) {
  return o("flexGrow", v);
}

function flexWrap(v) {
  return o("flexWrap", "wrap");
}

function justifyContent(v) {
  return o("justifyContent", v === "spaceAround" ? "space-around" : (
                v === "center" ? "center" : (
                    v === "spaceBetween" ? "space-between" : (
                        v === "flexStart" ? "flex-start" : (
                            v === "flexEnd" ? "flex-end" : "space-evenly"
                          )
                      )
                  )
              ));
}

function alignContent(v) {
  return o("alignContent", v === "stretch" ? "stretch" : (
                v === "center" ? "center" : (
                    v === "spaceBetween" ? "space-between" : (
                        v === "flexStart" ? "flex-start" : (
                            v === "flexEnd" ? "flex-end" : "space-around"
                          )
                      )
                  )
              ));
}

function alignItems(v) {
  return o("alignItems", v === "center" ? "center" : (
                v === "baseline" ? "baseline" : (
                    v === "flexStart" ? "flex-start" : (
                        v === "flexEnd" ? "flex-end" : "stretch"
                      )
                  )
              ));
}

function alignSelf(v) {
  return o("alignSelf", v === "stretch" ? "stretch" : (
                v === "center" ? "center" : (
                    v === "baseline" ? "baseline" : (
                        v === "flexStart" ? "flex-start" : (
                            v === "flexEnd" ? "flex-end" : "auto"
                          )
                      )
                  )
              ));
}

function width(v) {
  return o("width", string_of_size(v));
}

function flexBasis(v) {
  return o("flexBasis", string_of_size(v));
}

function height(v) {
  return o("height", string_of_size(v));
}

function minHeight(v) {
  return o("minHeight", string_of_size(v));
}

function minWidth(v) {
  return o("minWidth", string_of_size(v));
}

function maxHeight(v) {
  return o("maxHeight", string_of_size(v));
}

function maxWidth(v) {
  return o("maxWidth", string_of_size(v));
}

function top(v) {
  var arg = Core.Styles.getSpace;
  return o("top", Curry._3(arg, undefined, undefined, v));
}

function left(v) {
  var arg = Core.Styles.getSpace;
  return o("left", Curry._3(arg, undefined, undefined, v));
}

function bottom(v) {
  var arg = Core.Styles.getSpace;
  return o("bottom", Curry._3(arg, undefined, undefined, v));
}

function right(v) {
  var arg = Core.Styles.getSpace;
  return o("right", Curry._3(arg, undefined, undefined, v));
}

function start(v) {
  var arg = Core.Styles.getSpace;
  return o("start", Curry._3(arg, undefined, undefined, v));
}

function end_(v) {
  var arg = Core.Styles.getSpace;
  return o("end", Curry._3(arg, undefined, undefined, v));
}

function overflow(v) {
  return o("overflow", v === "hidden" ? "hidden" : (
                v === "visible" ? "visible" : "scroll"
              ));
}

function position(v) {
  return o("position", v === "relative" ? "relative" : "absolute");
}

function padding2(v, h) {
  var arg = Core.Styles.getSpace;
  var arg$1 = Core.Styles.getSpace;
  var v_0 = [
    "paddingHorizontal",
    Curry._3(arg, undefined, undefined, h)
  ];
  var v_1 = {
    hd: [
      "paddingVertical",
      Curry._3(arg$1, undefined, undefined, v)
    ],
    tl: /* [] */0
  };
  var v$1 = {
    hd: v_0,
    tl: v_1
  };
  return Caml_option.some(Js_dict.fromList(v$1));
}

function padding4(l_, t, r, b) {
  var arg = Core.Styles.getSpace;
  var arg$1 = Core.Styles.getSpace;
  var arg$2 = Core.Styles.getSpace;
  var arg$3 = Core.Styles.getSpace;
  var v_0 = [
    "paddingLeft",
    Curry._3(arg, undefined, undefined, l_)
  ];
  var v_1 = {
    hd: [
      "paddingTop",
      Curry._3(arg$1, undefined, undefined, t)
    ],
    tl: {
      hd: [
        "paddingBottom",
        Curry._3(arg$2, undefined, undefined, b)
      ],
      tl: {
        hd: [
          "paddingRight",
          Curry._3(arg$3, undefined, undefined, r)
        ],
        tl: /* [] */0
      }
    }
  };
  var v = {
    hd: v_0,
    tl: v_1
  };
  return Caml_option.some(Js_dict.fromList(v));
}

function padding(v) {
  return op("padding", (function (s) {
                var arg = Core.Styles.getSpace;
                return Curry._3(arg, undefined, undefined, s);
              }), v);
}

function paddingTop(v) {
  var arg = Core.Styles.getSpace;
  return o("paddingTop", Curry._3(arg, undefined, undefined, v));
}

function paddingBottom(v) {
  var arg = Core.Styles.getSpace;
  return o("paddingBottom", Curry._3(arg, undefined, undefined, v));
}

function paddingLeft(v) {
  var arg = Core.Styles.getSpace;
  return o("paddingLeft", Curry._3(arg, undefined, undefined, v));
}

function paddingRight(v) {
  var arg = Core.Styles.getSpace;
  return o("paddingRight", Curry._3(arg, undefined, undefined, v));
}

function margin2(v, h) {
  var arg = Core.Styles.getSpace;
  var arg$1 = Core.Styles.getSpace;
  var v_0 = [
    "marginVertical",
    Curry._3(arg, undefined, undefined, v)
  ];
  var v_1 = {
    hd: [
      "marginHorizontal",
      Curry._3(arg$1, undefined, undefined, h)
    ],
    tl: /* [] */0
  };
  var v$1 = {
    hd: v_0,
    tl: v_1
  };
  return Caml_option.some(Js_dict.fromList(v$1));
}

function margin4(l_, t, r, b) {
  var arg = Core.Styles.getSpace;
  var arg$1 = Core.Styles.getSpace;
  var arg$2 = Core.Styles.getSpace;
  var arg$3 = Core.Styles.getSpace;
  var v_0 = [
    "marginLeft",
    Curry._3(arg, undefined, undefined, l_)
  ];
  var v_1 = {
    hd: [
      "marginTop",
      Curry._3(arg$1, undefined, undefined, t)
    ],
    tl: {
      hd: [
        "marginBottom",
        Curry._3(arg$2, undefined, undefined, b)
      ],
      tl: {
        hd: [
          "marginRight",
          Curry._3(arg$3, undefined, undefined, r)
        ],
        tl: /* [] */0
      }
    }
  };
  var v = {
    hd: v_0,
    tl: v_1
  };
  return Caml_option.some(Js_dict.fromList(v));
}

function margin(v) {
  return op("margin", (function (s) {
                var arg = Core.Styles.getSpace;
                return Curry._3(arg, undefined, undefined, s);
              }), v);
}

function marginTop(v) {
  var arg = Core.Styles.getSpace;
  return o("marginTop", Curry._3(arg, undefined, undefined, v));
}

function marginBottom(v) {
  var arg = Core.Styles.getSpace;
  return o("marginBottom", Curry._3(arg, undefined, undefined, v));
}

function marginLeft(v) {
  var arg = Core.Styles.getSpace;
  return o("marginLeft", Curry._3(arg, undefined, undefined, v));
}

function marginRight(v) {
  var arg = Core.Styles.getSpace;
  return o("marginRight", Curry._3(arg, undefined, undefined, v));
}

function backgroundColor(v) {
  return o("backgroundColor", string_of_color(undefined, undefined, Core.Styles.getColor(undefined, undefined, v)));
}

function overlayColor(v) {
  return o("overlayColor", string_of_color(undefined, undefined, Core.Styles.getColor(undefined, undefined, v)));
}

function tintColor(v) {
  return o("tintColor", string_of_color(undefined, undefined, Core.Styles.getColor(undefined, undefined, v)));
}

function borderRadius(v) {
  return o("borderRadius", Core.Styles.getBorderRadius(v));
}

function color(highlight, param, v) {
  var res = o("color", string_of_color(undefined, undefined, Core.Styles.getTextColor(highlight, v)));
  console.log("res", res);
  return res;
}

function make(styleList) {
  return List.fold_left((function (obj, el) {
                if (el !== undefined) {
                  return Object.assign(obj, Caml_option.valFromOption(el));
                } else {
                  return obj;
                }
              }), {}, styleList);
}

function merge(a, b) {
  return Object.assign(a, Object.assign(b, {}));
}

export {
  Values ,
  l ,
  o ,
  op ,
  shadowOffset ,
  fontWeight ,
  includeFontPadding ,
  letterSpacing ,
  lineHeight ,
  textShadowRadius ,
  textDecorationColor ,
  textShadowColor ,
  borderBottomColor ,
  borderColor ,
  borderEndColor ,
  borderLeftColor ,
  borderRightColor ,
  borderStartColor ,
  borderTopColor ,
  borderStyle ,
  shadowColor ,
  shadowOpacity ,
  shadowRadius ,
  borderBottomEndRadius ,
  borderBottomLeftRadius ,
  borderBottomRightRadius ,
  borderBottomStartRadius ,
  borderTopEndRadius ,
  borderTopLeftRadius ,
  borderTopRightRadius ,
  borderTopStartRadius ,
  elevation ,
  resizeMode ,
  fontFamily ,
  direction ,
  display ,
  zIndex ,
  borderWidth ,
  opacity ,
  aspectRatio ,
  fontSize ,
  borderEndWidth ,
  borderStartWidth ,
  borderRightWidth ,
  borderTopWidth ,
  borderLeftWidth ,
  borderBottomWidth ,
  flexDirection ,
  flex ,
  flexShrink ,
  flexGrow ,
  flexWrap ,
  justifyContent ,
  alignContent ,
  alignItems ,
  alignSelf ,
  width ,
  flexBasis ,
  height ,
  minHeight ,
  minWidth ,
  maxHeight ,
  maxWidth ,
  top ,
  left ,
  bottom ,
  right ,
  start ,
  end_ ,
  overflow ,
  position ,
  padding2 ,
  padding4 ,
  padding ,
  paddingTop ,
  paddingBottom ,
  paddingLeft ,
  paddingRight ,
  margin2 ,
  margin4 ,
  margin ,
  marginTop ,
  marginBottom ,
  marginLeft ,
  marginRight ,
  backgroundColor ,
  overlayColor ,
  tintColor ,
  borderRadius ,
  color ,
  make ,
  merge ,
  
}
/* Core Not a pure module */
