// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$String from "bs-platform/lib/es6/string.js";

function style(a) {
  return a;
}

function join(separator, strings) {
  var _acc = "";
  var _strings = strings;
  while(true) {
    var strings$1 = _strings;
    var acc = _acc;
    if (!strings$1) {
      return acc;
    }
    var xs = strings$1.tl;
    var x = strings$1.hd;
    if (!xs) {
      return acc + x;
    }
    _strings = xs;
    _acc = acc + (x + separator);
    continue ;
  };
}

function string_of_float(prim) {
  return prim.toString();
}

function string_of_int(prim) {
  return prim.toString();
}

function string_of_length(param) {
  if (typeof param === "number") {
    return "0";
  }
  var variant = param.HASH;
  if (variant >= 22632) {
    if (variant >= 25096) {
      if (variant >= 26433) {
        if (variant >= 5691738) {
          return param.VAL.toString() + "rem";
        } else {
          return param.VAL.toString() + "vw";
        }
      } else if (variant >= 26418) {
        return param.VAL.toString() + "vh";
      } else {
        return param.VAL.toString() + "px";
      }
    } else if (variant >= 24416) {
      if (variant >= 25092) {
        return param.VAL.toString() + "pt";
      } else {
        return param.VAL.toString() + "mm";
      }
    } else if (variant >= 22643) {
      return param.VAL.toString() + "ex";
    } else {
      return param.VAL.toString() + "em";
    }
  }
  if (variant >= -833470756) {
    if (variant >= 22181) {
      if (variant >= 22186) {
        return param.VAL.toString() + "cm";
      } else {
        return param.VAL.toString() + "ch";
      }
    } else if (variant >= -119887163) {
      return param.VAL.toString() + "%";
    } else {
      return param.VAL.toString() + "vmin";
    }
  }
  if (variant === -1040484748) {
    return param.VAL.toString() + "px";
  }
  if (variant >= -833472530) {
    return param.VAL.toString() + "vmax";
  }
  var match = param.VAL;
  if (match[0] >= 5745024) {
    return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
  }
}

function string_of_angle(param) {
  var variant = param.HASH;
  if (variant >= 4995526) {
    if (variant >= 5690837) {
      return param.VAL.toString() + "rad";
    } else {
      return param.VAL.toString() + "deg";
    }
  } else if (variant >= -855250051) {
    return param.VAL.toString() + "turn";
  } else {
    return param.VAL.toString() + "grad";
  }
}

function string_of_rgb(r, g, b) {
  return "rgb(" + (r.toString() + (", " + (g.toString() + (", " + (b.toString() + ")")))));
}

function string_of_rgba(r, g, b, a) {
  if (a === 1) {
    return string_of_rgb(r, g, b);
  } else {
    return "rgba(" + (r.toString() + (", " + (g.toString() + (", " + (b.toString() + (", " + (a.toString() + ")")))))));
  }
}

function string_of_p3(r, g, b, a) {
  return "color(display-p3 " + (r.toString() + (" " + (g.toString() + (" " + (b.toString() + (
                    a === 1 ? ")" : " / " + (a.toString() + ")")
                  ))))));
}

function string_of_percent(param) {
  return param.VAL.toString() + "%";
}

function string_of_hsl(h, s, l) {
  return "hsl(" + (string_of_angle(h) + (", " + (string_of_percent(s) + (", " + (string_of_percent(l) + ")")))));
}

function string_of_alpha(param) {
  if (param.HASH >= 5496390) {
    return param.VAL.toString();
  } else {
    return param.VAL.toString() + "%";
  }
}

function string_of_color(param) {
  if (typeof param === "number") {
    return "transparent";
  }
  var variant = param.HASH;
  if (variant !== 25027) {
    if (variant >= 5692173) {
      var match = param.VAL;
      return string_of_rgb(match[0], match[1], match[2]);
    }
    var match$1 = param.VAL;
    return string_of_rgba(match$1[0], match$1[1], match$1[2], match$1[3]);
  }
  var match$2 = param.VAL;
  return string_of_p3(match$2[0], match$2[1], match$2[2], match$2[3]);
}

function string_of_stops(stops) {
  return join(", ", List.map((function (param) {
                    return join(" ", {
                                hd: string_of_color(param[1]),
                                tl: {
                                  hd: string_of_length(param[0]),
                                  tl: /* [] */0
                                }
                              });
                  }), stops));
}

function string_of_linearGradient(angle, stops) {
  return "linear-gradient(" + (string_of_angle(angle) + (", " + (string_of_stops(stops) + ")")));
}

function string_of_repeatingLinearGradient(angle, stops) {
  return "repeating-linear-gradient(" + (string_of_angle(angle) + (", " + (string_of_stops(stops) + ")")));
}

function string_of_translate3d(x, y, z) {
  return "translate3d(" + (string_of_length(x) + (", " + (string_of_length(y) + (", " + (string_of_length(z) + ")")))));
}

function string_of_scale(x, y) {
  return "scale(" + (x.toString() + (", " + (y.toString() + ")")));
}

function string_of_time(t) {
  return t.toString() + "ms";
}

function string_of_overflow(param) {
  if (param !== -949692403) {
    if (param >= -862584982) {
      if (param >= 589592690) {
        return "visible";
      } else {
        return "hidden";
      }
    } else if (param >= -878767996) {
      return "initial";
    } else {
      return "auto";
    }
  } else {
    return "scroll";
  }
}

function string_of_visibility(param) {
  if (param >= 589592690) {
    return "visible";
  } else {
    return "hidden";
  }
}

function string_of_background(bg) {
  if (typeof bg === "number") {
    if (bg >= 582626130) {
      return "transparent";
    } else {
      return "none";
    }
  }
  var variant = bg.HASH;
  if (variant >= 5692173) {
    if (variant >= 119548911) {
      if (variant < 616379637) {
        return "radial-gradient(" + (string_of_stops(bg.VAL) + ")");
      }
      var match = bg.VAL;
      return "linear-gradient(" + (string_of_angle(match[0]) + (", " + (string_of_stops(match[1]) + ")")));
    }
    if (variant >= 5843823) {
      return "url(" + (bg.VAL + ")");
    }
    var match$1 = bg.VAL;
    return string_of_rgb(match$1[0], match$1[1], match$1[2]);
  }
  if (variant >= -160280644) {
    if (variant >= 25027) {
      var match$2 = bg.VAL;
      return string_of_p3(match$2[0], match$2[1], match$2[2], match$2[3]);
    }
    var match$3 = bg.VAL;
    return "repeating-linear-gradient(" + (string_of_angle(match$3[0]) + (", " + (string_of_stops(match$3[1]) + ")")));
  }
  if (variant >= -657111370) {
    return "repeating-radial-gradient(" + (string_of_stops(bg.VAL) + ")");
  }
  var match$4 = bg.VAL;
  return string_of_rgba(match$4[0], match$4[1], match$4[2], match$4[3]);
}

function string_of_cursor(x) {
  if (x >= 82328943) {
    if (x >= 477181167) {
      if (x >= 624364317) {
        if (x !== 626862894) {
          if (x >= 939907157) {
            if (x >= 951366027) {
              return "ne-resize";
            } else {
              return "not-allowed";
            }
          } else if (x >= 676920916) {
            return "col-resize";
          } else {
            return "nw-resize";
          }
        } else {
          return "context-menu";
        }
      } else if (x >= 577832966) {
        if (x >= 621258809) {
          return "e-resize";
        } else {
          return "ew-resize";
        }
      } else if (x >= 563171728) {
        return "alias";
      } else {
        return "nesw-resize";
      }
    } else if (x >= 302348560) {
      if (x !== 365450254) {
        if (x >= 457757954) {
          if (x >= 465819841) {
            return "default";
          } else {
            return "n-resize";
          }
        } else if (x >= 381626435) {
          return "vertical-text";
        } else {
          return "no-drop";
        }
      } else {
        return "all-scroll";
      }
    } else if (x >= 180897442) {
      if (x >= 294257099) {
        return "w-resize";
      } else {
        return "crosshair";
      }
    } else if (x >= 103479213) {
      return "progress";
    } else {
      return "nwse-resize";
    }
  } else if (x >= -840286290) {
    if (x >= -459627717) {
      if (x !== -348903737) {
        if (x >= -19620980) {
          if (x >= -18796519) {
            return "ns-resize";
          } else {
            return "grabbing";
          }
        } else if (x >= -88732200) {
          return "zoom-in";
        } else {
          return "zoom-out";
        }
      } else {
        return "s-resize";
      }
    } else if (x >= -786317123) {
      if (x >= -693048282) {
        return "se-resize";
      } else {
        return "pointer";
      }
    } else if (x >= -822977931) {
      return "wait";
    } else {
      return "row-resize";
    }
  } else if (x >= -999567412) {
    if (x !== -989121855) {
      if (x >= -922086728) {
        if (x >= -856044371) {
          return "text";
        } else {
          return "none";
        }
      } else if (x >= -933174511) {
        return "move";
      } else {
        return "grab";
      }
    } else {
      return "help";
    }
  } else if (x >= -1044071499) {
    if (x >= -1020049992) {
      return "sw-resize";
    } else {
      return "copy";
    }
  } else if (x >= -1044569694) {
    return "cell";
  } else {
    return "auto";
  }
}

function string_of_fontWeight(x) {
  if (typeof x === "number") {
    if (x >= -81801163) {
      if (x >= 434326211) {
        if (x >= 812216871) {
          if (x >= 888264127) {
            return "900";
          } else {
            return "400";
          }
        } else if (x >= 653193961) {
          return "unset";
        } else {
          return "lighter";
        }
      } else if (x !== -21160922) {
        if (x >= -20425611) {
          return "500";
        } else {
          return "800";
        }
      } else {
        return "200";
      }
    } else if (x >= -812709613) {
      if (x >= -534575822) {
        if (x >= -184774442) {
          return "300";
        } else {
          return "bolder";
        }
      } else if (x >= -601204732) {
        return "inherit";
      } else {
        return "600";
      }
    } else if (x !== -878767996) {
      if (x >= -855898535) {
        return "100";
      } else {
        return "700";
      }
    } else {
      return "initial";
    }
  } else {
    return x.VAL.toString();
  }
}

function string_of_fontStyle(param) {
  if (param >= 107228912) {
    if (param >= 734792881) {
      if (param >= 812216871) {
        return "normal";
      } else {
        return "oblique";
      }
    } else if (param >= 653193961) {
      return "unset";
    } else {
      return "italic";
    }
  } else if (param >= -601204732) {
    return "inherit";
  } else {
    return "initial";
  }
}

function string_of_flex(param) {
  if (typeof param === "number") {
    if (param !== -922086728) {
      if (param >= -878767996) {
        return "initial";
      } else {
        return "auto";
      }
    } else {
      return "none";
    }
  } else {
    return param.VAL.toString();
  }
}

function string_of_flexBasis(param) {
  if (typeof param === "number") {
    if (param >= -550577721) {
      if (param >= 60557045) {
        if (param >= 427265337) {
          return "content";
        } else {
          return "max-content";
        }
      } else if (param >= -195805336) {
        return "fit-content";
      } else {
        return "min-content";
      }
    } else if (param !== -1011102077) {
      if (param >= -789508312) {
        return "0";
      } else {
        return "auto";
      }
    } else {
      return "fill";
    }
  }
  var variant = param.HASH;
  if (variant >= 22632) {
    if (variant >= 25096) {
      if (variant >= 26433) {
        if (variant >= 5691738) {
          return param.VAL.toString() + "rem";
        } else {
          return param.VAL.toString() + "vw";
        }
      } else if (variant >= 26418) {
        return param.VAL.toString() + "vh";
      } else {
        return param.VAL.toString() + "px";
      }
    } else if (variant >= 24416) {
      if (variant >= 25092) {
        return param.VAL.toString() + "pt";
      } else {
        return param.VAL.toString() + "mm";
      }
    } else if (variant >= 22643) {
      return param.VAL.toString() + "ex";
    } else {
      return param.VAL.toString() + "em";
    }
  }
  if (variant >= -833470756) {
    if (variant >= 22181) {
      if (variant >= 22186) {
        return param.VAL.toString() + "cm";
      } else {
        return param.VAL.toString() + "ch";
      }
    } else if (variant >= -119887163) {
      return param.VAL.toString() + "%";
    } else {
      return param.VAL.toString() + "vmin";
    }
  }
  if (variant === -1040484748) {
    return param.VAL.toString() + "px";
  }
  if (variant >= -833472530) {
    return param.VAL.toString() + "vmax";
  }
  var match = param.VAL;
  if (match[0] >= 5745024) {
    return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
  }
}

var Converter = {
  string_of_length: string_of_length,
  string_of_angle: string_of_angle,
  string_of_rgb: string_of_rgb,
  string_of_rgba: string_of_rgba,
  string_of_p3: string_of_p3,
  string_of_percent: string_of_percent,
  string_of_hsl: string_of_hsl,
  string_of_alpha: string_of_alpha,
  string_of_color: string_of_color,
  string_of_stops: string_of_stops,
  string_of_linearGradient: string_of_linearGradient,
  string_of_repeatingLinearGradient: string_of_repeatingLinearGradient,
  string_of_translate3d: string_of_translate3d,
  string_of_scale: string_of_scale,
  string_of_time: string_of_time,
  string_of_overflow: string_of_overflow,
  string_of_visibility: string_of_visibility,
  string_of_background: string_of_background,
  string_of_cursor: string_of_cursor,
  string_of_fontWeight: string_of_fontWeight,
  string_of_fontStyle: string_of_fontStyle,
  string_of_flex: string_of_flex,
  string_of_flexBasis: string_of_flexBasis
};

function d(property, value) {
  return {
          HASH: /* declaration */-434952966,
          VAL: [
            property,
            value
          ]
        };
}

function important(v) {
  if (typeof v === "number") {
    return v;
  }
  if (v.HASH !== -434952966) {
    return v;
  }
  var match = v.VAL;
  return {
          HASH: /* declaration */-434952966,
          VAL: [
            match[0],
            match[1] + " !important"
          ]
        };
}

function label(label$1) {
  return {
          HASH: /* declaration */-434952966,
          VAL: [
            "label",
            label$1
          ]
        };
}

function deg(x) {
  return {
          HASH: /* deg */4995526,
          VAL: x
        };
}

function rad(x) {
  return {
          HASH: /* rad */5690837,
          VAL: x
        };
}

function grad(x) {
  return {
          HASH: /* grad */-999567410,
          VAL: x
        };
}

function turn(x) {
  return {
          HASH: /* turn */-855250051,
          VAL: x
        };
}

function pct(x) {
  return {
          HASH: /* percent */-119887163,
          VAL: x
        };
}

function rgb(r, g, b) {
  return {
          HASH: /* rgb */5692173,
          VAL: [
            r,
            g,
            b
          ]
        };
}

function rgba(r, g, b, a) {
  return {
          HASH: /* rgba */-878128972,
          VAL: [
            r,
            g,
            b,
            a
          ]
        };
}

function linearGradient(angle, stops) {
  return {
          HASH: /* linearGradient */616379637,
          VAL: [
            angle,
            stops
          ]
        };
}

function repeatingLinearGradient(angle, stops) {
  return {
          HASH: /* repeatingLinearGradient */-160280644,
          VAL: [
            angle,
            stops
          ]
        };
}

function radialGradient(stops) {
  return {
          HASH: /* radialGradient */119548911,
          VAL: stops
        };
}

function repeatingRadialGradient(stops) {
  return {
          HASH: /* repeatingRadialGradient */-657111370,
          VAL: stops
        };
}

function string_of_length_cascading(param) {
  if (typeof param === "number") {
    if (param >= -601204732) {
      if (param >= 653193961) {
        return "unset";
      } else {
        return "inherit";
      }
    } else if (param >= -789508312) {
      return "0";
    } else {
      return "initial";
    }
  }
  var variant = param.HASH;
  if (variant >= 22632) {
    if (variant >= 25096) {
      if (variant >= 26433) {
        if (variant >= 5691738) {
          return param.VAL.toString() + "rem";
        } else {
          return param.VAL.toString() + "vw";
        }
      } else if (variant >= 26418) {
        return param.VAL.toString() + "vh";
      } else {
        return param.VAL.toString() + "px";
      }
    } else if (variant >= 24416) {
      if (variant >= 25092) {
        return param.VAL.toString() + "pt";
      } else {
        return param.VAL.toString() + "mm";
      }
    } else if (variant >= 22643) {
      return param.VAL.toString() + "ex";
    } else {
      return param.VAL.toString() + "em";
    }
  }
  if (variant >= -833470756) {
    if (variant >= 22181) {
      if (variant >= 22186) {
        return param.VAL.toString() + "cm";
      } else {
        return param.VAL.toString() + "ch";
      }
    } else if (variant >= -119887163) {
      return param.VAL.toString() + "%";
    } else {
      return param.VAL.toString() + "vmin";
    }
  }
  if (variant === -1040484748) {
    return param.VAL.toString() + "px";
  }
  if (variant >= -833472530) {
    return param.VAL.toString() + "vmax";
  }
  var match = param.VAL;
  if (match[0] >= 5745024) {
    return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
  }
}

function ch(x) {
  return {
          HASH: /* ch */22181,
          VAL: x
        };
}

function cm(x) {
  return {
          HASH: /* cm */22186,
          VAL: x
        };
}

function em(x) {
  return {
          HASH: /* em */22632,
          VAL: x
        };
}

function ex(x) {
  return {
          HASH: /* ex */22643,
          VAL: x
        };
}

function fr(x) {
  return {
          HASH: /* fr */22860,
          VAL: x
        };
}

function mm(x) {
  return {
          HASH: /* mm */24416,
          VAL: x
        };
}

function pt(x) {
  return {
          HASH: /* pt */25092,
          VAL: x
        };
}

function px(x) {
  return {
          HASH: /* px */25096,
          VAL: x
        };
}

function pxFloat(x) {
  return {
          HASH: /* pxFloat */-1040484748,
          VAL: x
        };
}

function rem(x) {
  return {
          HASH: /* rem */5691738,
          VAL: x
        };
}

function vh(x) {
  return {
          HASH: /* vh */26418,
          VAL: x
        };
}

function vmax(x) {
  return {
          HASH: /* vmax */-833472530,
          VAL: x
        };
}

function vmin(x) {
  return {
          HASH: /* vmin */-833470756,
          VAL: x
        };
}

function vw(x) {
  return {
          HASH: /* vw */26433,
          VAL: x
        };
}

function $neg(a, b) {
  return {
          HASH: /* calc */-1044768619,
          VAL: [
            /* sub */5745024,
            a,
            b
          ]
        };
}

function $plus(a, b) {
  return {
          HASH: /* calc */-1044768619,
          VAL: [
            /* add */4846113,
            a,
            b
          ]
        };
}

var Calc = {
  $neg: $neg,
  $plus: $plus
};

function size(x, y) {
  return {
          HASH: /* size */-866934591,
          VAL: [
            x,
            y
          ]
        };
}

function resize(x) {
  return d("resize", x >= -367674250 ? (
                x !== 365165796 ? (
                    x >= 653193961 ? (
                        x >= 888960333 ? "block" : "unset"
                      ) : (
                        x >= 423610969 ? "inline" : "vertical"
                      )
                  ) : "horizontal"
              ) : (
                x >= -878767996 ? (
                    x >= -601204732 ? "inherit" : "initial"
                  ) : (
                    x >= -922086728 ? "none" : "both"
                  )
              ));
}

function count(x) {
  return {
          HASH: /* count */-899463985,
          VAL: x
        };
}

function cubicBesier(a, b, c, d) {
  return {
          HASH: /* cubicBezier */-554785527,
          VAL: [
            a,
            b,
            c,
            d
          ]
        };
}

function localUrl(x) {
  return {
          HASH: /* localUrl */-538079548,
          VAL: x
        };
}

function rotate(a) {
  return {
          HASH: /* rotate */-887077285,
          VAL: a
        };
}

function rotate3d(x, y, z, a) {
  return {
          HASH: /* rotate3d */142802924,
          VAL: [
            x,
            y,
            z,
            a
          ]
        };
}

function rotateX(a) {
  return {
          HASH: /* rotateX */-249738851,
          VAL: a
        };
}

function rotateY(a) {
  return {
          HASH: /* rotateY */-249738850,
          VAL: a
        };
}

function rotateZ(a) {
  return {
          HASH: /* rotateZ */-249738849,
          VAL: a
        };
}

function scale(x, y) {
  return {
          HASH: /* scale */-120664438,
          VAL: [
            x,
            y
          ]
        };
}

function scale3d(x, y, z) {
  return {
          HASH: /* scale3d */-452513317,
          VAL: [
            x,
            y,
            z
          ]
        };
}

function scaleX(x) {
  return {
          HASH: /* scaleX */1009117838,
          VAL: x
        };
}

function scaleY(x) {
  return {
          HASH: /* scaleY */1009117839,
          VAL: x
        };
}

function scaleZ(x) {
  return {
          HASH: /* scaleZ */1009117840,
          VAL: x
        };
}

function skew(x, y) {
  return {
          HASH: /* skew */-866839798,
          VAL: [
            x,
            y
          ]
        };
}

function skewX(a) {
  return {
          HASH: /* skewX */-31746546,
          VAL: a
        };
}

function skewY(a) {
  return {
          HASH: /* skewY */-31746545,
          VAL: a
        };
}

function steps(i, dir) {
  return {
          HASH: /* steps */68058023,
          VAL: [
            i,
            dir
          ]
        };
}

function translate(x, y) {
  return {
          HASH: /* translate */-914368690,
          VAL: [
            x,
            y
          ]
        };
}

function translate3d(x, y, z) {
  return {
          HASH: /* translate3d */178189215,
          VAL: [
            x,
            y,
            z
          ]
        };
}

function translateX(x) {
  return {
          HASH: /* translateX */106728778,
          VAL: x
        };
}

function translateY(y) {
  return {
          HASH: /* translateY */106728779,
          VAL: y
        };
}

function translateZ(z) {
  return {
          HASH: /* translateZ */106728780,
          VAL: z
        };
}

function url(x) {
  return {
          HASH: /* url */5843823,
          VAL: x
        };
}

function display(x) {
  return d("display", x >= 64712127 ? (
                x >= 653193961 ? (
                    x >= 793912528 ? (
                        x >= 888960333 ? (
                            x >= 1054826616 ? "table-caption" : "block"
                          ) : (
                            x >= 850209563 ? "table-column-group" : "table-cell"
                          )
                      ) : (
                        x >= 790889754 ? "contents" : "unset"
                      )
                  ) : (
                    x >= 182695950 ? (
                        x >= 606419204 ? (
                            x >= 632591505 ? "list-item" : "table-header-group"
                          ) : (
                            x >= 423610969 ? "inline" : "table"
                          )
                      ) : (
                        x >= 97122692 ? "table-column" : "inline-grid"
                      )
                  )
              ) : (
                x >= -843129172 ? (
                    x >= -601204732 ? (
                        x >= -147785676 ? (
                            x >= 53323314 ? "inline-flex" : "inline-block"
                          ) : (
                            x >= -245903344 ? "run-in" : "inherit"
                          )
                      ) : (
                        x >= -836725517 ? "table-row-group" : "table-row"
                      )
                  ) : (
                    x >= -999565626 ? (
                        x >= -878767996 ? (
                            x >= -854050059 ? "inline-table" : "initial"
                          ) : (
                            x >= -922086728 ? "none" : "grid"
                          )
                      ) : (
                        x >= -1010954439 ? "flex" : "table-footer-group"
                      )
                  )
              ));
}

function position(x) {
  return d("position", x >= 100392110 ? (
                x >= 653193961 ? (
                    x >= 903134412 ? "relative" : "unset"
                  ) : (
                    x >= 188263721 ? "sticky" : "static"
                  )
              ) : (
                x >= -601204732 ? (
                    x >= 10615156 ? "fixed" : "inherit"
                  ) : (
                    x >= -878767996 ? "initial" : "absolute"
                  )
              ));
}

function top(x) {
  return d("top", string_of_length_cascading(x));
}

function bottom(x) {
  return d("bottom", string_of_length_cascading(x));
}

function left(x) {
  return d("left", string_of_length_cascading(x));
}

function right(x) {
  return d("right", string_of_length_cascading(x));
}

function flex(x) {
  return d("flex", string_of_flex(x));
}

function flex3(grow, shrink, basis) {
  return d("flex", grow.toString() + (" " + (shrink.toString() + (" " + string_of_flexBasis(basis)))));
}

function flexGrow(x) {
  return d("flexGrow", x.toString());
}

function flexShrink(x) {
  return d("flexShrink", x.toString());
}

function flexBasis(x) {
  return d("flexBasis", string_of_flexBasis(x));
}

function flexDirection(x) {
  return d("flexDirection", x >= 135477484 ? (
                x >= 378951208 ? "row-reverse" : "column-reverse"
              ) : (
                x >= 5693978 ? "row" : "column"
              ));
}

function flexWrap(x) {
  return d("flexWrap", x !== -463121288 ? (
                x >= 867913355 ? "nowrap" : "wrap"
              ) : "wrap-reverse");
}

function order(x) {
  return d("order", x.toString());
}

function string_of_margin(param) {
  if (typeof param === "number") {
    if (param >= -789508312) {
      return "0";
    } else {
      return "auto";
    }
  }
  var variant = param.HASH;
  if (variant >= 22632) {
    if (variant >= 25096) {
      if (variant >= 26433) {
        if (variant >= 5691738) {
          return param.VAL.toString() + "rem";
        } else {
          return param.VAL.toString() + "vw";
        }
      } else if (variant >= 26418) {
        return param.VAL.toString() + "vh";
      } else {
        return param.VAL.toString() + "px";
      }
    } else if (variant >= 24416) {
      if (variant >= 25092) {
        return param.VAL.toString() + "pt";
      } else {
        return param.VAL.toString() + "mm";
      }
    } else if (variant >= 22643) {
      return param.VAL.toString() + "ex";
    } else {
      return param.VAL.toString() + "em";
    }
  }
  if (variant >= -833470756) {
    if (variant >= 22181) {
      if (variant >= 22186) {
        return param.VAL.toString() + "cm";
      } else {
        return param.VAL.toString() + "ch";
      }
    } else if (variant >= -119887163) {
      return param.VAL.toString() + "%";
    } else {
      return param.VAL.toString() + "vmin";
    }
  }
  if (variant === -1040484748) {
    return param.VAL.toString() + "px";
  }
  if (variant >= -833472530) {
    return param.VAL.toString() + "vmax";
  }
  var match = param.VAL;
  if (match[0] >= 5745024) {
    return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
  }
}

function margin(x) {
  return d("margin", string_of_margin(x));
}

function margin2(v, h) {
  return d("margin", string_of_margin(v) + (" " + string_of_margin(h)));
}

function margin3(top, h, bottom) {
  return d("margin", string_of_margin(top) + (" " + (string_of_margin(h) + (" " + string_of_margin(bottom)))));
}

function margin4(top, right, bottom, left) {
  return d("margin", string_of_margin(top) + (" " + (string_of_margin(right) + (" " + (string_of_margin(bottom) + (" " + string_of_margin(left)))))));
}

function marginLeft(x) {
  return d("marginLeft", string_of_margin(x));
}

function marginRight(x) {
  return d("marginRight", string_of_margin(x));
}

function marginTop(x) {
  return d("marginTop", string_of_margin(x));
}

function marginBottom(x) {
  return d("marginBottom", string_of_margin(x));
}

function padding(x) {
  return d("padding", string_of_length(x));
}

function padding2(v, h) {
  return d("padding", string_of_length(v) + (" " + string_of_length(h)));
}

function padding3(top, h, bottom) {
  return d("padding", string_of_length(top) + (" " + (string_of_length(h) + (" " + string_of_length(bottom)))));
}

function padding4(top, right, bottom, left) {
  return d("padding", string_of_length(top) + (" " + (string_of_length(right) + (" " + (string_of_length(bottom) + (" " + string_of_length(left)))))));
}

function paddingLeft(x) {
  return d("paddingLeft", string_of_length(x));
}

function paddingRight(x) {
  return d("paddingRight", string_of_length(x));
}

function paddingTop(x) {
  return d("paddingTop", string_of_length(x));
}

function paddingBottom(x) {
  return d("paddingBottom", string_of_length(x));
}

function string_of_minmax(param) {
  if (typeof param === "number") {
    if (param >= -550577721) {
      if (param >= 60557045) {
        return "max-content";
      } else {
        return "min-content";
      }
    } else if (param >= -789508312) {
      return "0";
    } else {
      return "auto";
    }
  }
  var variant = param.HASH;
  if (variant >= 22643) {
    if (variant >= 25096) {
      if (variant >= 26433) {
        if (variant >= 5691738) {
          return param.VAL.toString() + "rem";
        } else {
          return param.VAL.toString() + "vw";
        }
      } else if (variant >= 26418) {
        return param.VAL.toString() + "vh";
      } else {
        return param.VAL.toString() + "px";
      }
    } else if (variant >= 24416) {
      if (variant >= 25092) {
        return param.VAL.toString() + "pt";
      } else {
        return param.VAL.toString() + "mm";
      }
    } else if (variant >= 22860) {
      return param.VAL.toString() + "fr";
    } else {
      return param.VAL.toString() + "ex";
    }
  }
  if (variant >= -119887163) {
    if (variant >= 22186) {
      if (variant >= 22632) {
        return param.VAL.toString() + "em";
      } else {
        return param.VAL.toString() + "cm";
      }
    } else if (variant >= 22181) {
      return param.VAL.toString() + "ch";
    } else {
      return param.VAL.toString() + "%";
    }
  }
  if (variant >= -833472530) {
    if (variant >= -833470756) {
      return param.VAL.toString() + "vmin";
    } else {
      return param.VAL.toString() + "vmax";
    }
  }
  if (variant >= -1040484748) {
    return param.VAL.toString() + "px";
  }
  var match = param.VAL;
  if (match[0] >= 5745024) {
    return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
  }
}

function string_of_dimension(param) {
  if (typeof param === "number") {
    if (param !== -922086728) {
      if (param >= -550577721) {
        if (param >= 60557045) {
          return "max-content";
        } else {
          return "min-content";
        }
      } else if (param >= -789508312) {
        return "0";
      } else {
        return "auto";
      }
    } else {
      return "none";
    }
  }
  var variant = param.HASH;
  if (variant >= 22632) {
    if (variant >= 25092) {
      if (variant !== 25096) {
        if (variant >= 26433) {
          if (variant >= 5691738) {
            return param.VAL.toString() + "rem";
          } else {
            return param.VAL.toString() + "vw";
          }
        } else if (variant >= 26418) {
          return param.VAL.toString() + "vh";
        } else {
          return param.VAL.toString() + "pt";
        }
      } else {
        return param.VAL.toString() + "px";
      }
    } else if (variant >= 22860) {
      if (variant >= 24416) {
        return param.VAL.toString() + "mm";
      } else {
        return param.VAL.toString() + "fr";
      }
    } else if (variant >= 22643) {
      return param.VAL.toString() + "ex";
    } else {
      return param.VAL.toString() + "em";
    }
  }
  if (variant >= -754859950) {
    if (variant >= 22181) {
      if (variant >= 22186) {
        return param.VAL.toString() + "cm";
      } else {
        return param.VAL.toString() + "ch";
      }
    }
    if (variant >= -119887163) {
      return param.VAL.toString() + "%";
    }
    var match = param.VAL;
    return "minmax(" + (string_of_minmax(match[0]) + ("," + (string_of_minmax(match[1]) + ")")));
  }
  if (variant >= -833472530) {
    if (variant >= -833470756) {
      return param.VAL.toString() + "vmin";
    } else {
      return param.VAL.toString() + "vmax";
    }
  }
  if (variant >= -1040484748) {
    return param.VAL.toString() + "px";
  }
  var match$1 = param.VAL;
  if (match$1[0] >= 5745024) {
    return "calc(" + (string_of_length(match$1[1]) + (" - " + (string_of_length(match$1[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match$1[1]) + (" + " + (string_of_length(match$1[2]) + ")")));
  }
}

function width(x) {
  return d("width", string_of_dimension(x));
}

function height(x) {
  return d("height", string_of_dimension(x));
}

function minWidth(x) {
  return d("minWidth", string_of_dimension(x));
}

function maxWidth(x) {
  return d("maxWidth", string_of_dimension(x));
}

function minHeight(x) {
  return d("minHeight", string_of_dimension(x));
}

function maxHeight(x) {
  return d("maxHeight", string_of_dimension(x));
}

function gridAutoDirectionToJs(param) {
  if (param >= -227605271) {
    if (param >= 5693978) {
      if (param >= 653193961) {
        return "unset";
      } else {
        return "row";
      }
    } else if (param >= -15525083) {
      return "row dense";
    } else {
      return "column dense";
    }
  } else if (param !== -878767996) {
    if (param >= -601204732) {
      return "inherit";
    } else {
      return "column";
    }
  } else {
    return "initial";
  }
}

function gridAutoFlow(direction) {
  return d("gridAutoFlow", gridAutoDirectionToJs(direction));
}

function repeatValueToJs(param) {
  if (typeof param === "number") {
    if (param >= 652328338) {
      return "auto-fill";
    } else {
      return "auto-fit";
    }
  } else {
    return param.VAL.toString();
  }
}

function gridLengthToJs(param) {
  if (typeof param === "number") {
    if (param >= -550577721) {
      if (param >= 60557045) {
        return "max-content";
      } else {
        return "min-content";
      }
    } else if (param >= -789508312) {
      return "0";
    } else {
      return "auto";
    }
  }
  var variant = param.HASH;
  if (variant >= 22643) {
    if (variant < 25096) {
      if (variant >= 24416) {
        if (variant >= 25092) {
          return param.VAL.toString() + "pt";
        } else {
          return param.VAL.toString() + "mm";
        }
      } else if (variant >= 22860) {
        return param.VAL.toString() + "fr";
      } else {
        return param.VAL.toString() + "ex";
      }
    }
    if (variant === 26418) {
      return param.VAL.toString() + "vh";
    }
    if (variant < 5691738) {
      if (variant >= 26433) {
        return param.VAL.toString() + "vw";
      } else {
        return param.VAL.toString() + "px";
      }
    }
    if (variant < 108828507) {
      return param.VAL.toString() + "rem";
    }
    var match = param.VAL;
    return "repeat(" + (repeatValueToJs(match[0]) + (", " + (string_of_dimension(match[1]) + ")")));
  }
  if (variant >= -754859950) {
    if (variant === -119887163) {
      return param.VAL.toString() + "%";
    }
    if (variant >= 22186) {
      if (variant >= 22632) {
        return param.VAL.toString() + "em";
      } else {
        return param.VAL.toString() + "cm";
      }
    }
    if (variant >= 22181) {
      return param.VAL.toString() + "ch";
    }
    var match$1 = param.VAL;
    return "minmax(" + (string_of_minmax(match$1[0]) + ("," + (string_of_minmax(match$1[1]) + ")")));
  }
  if (variant >= -833472530) {
    if (variant >= -833470756) {
      return param.VAL.toString() + "vmin";
    } else {
      return param.VAL.toString() + "vmax";
    }
  }
  if (variant >= -1040484748) {
    return param.VAL.toString() + "px";
  }
  var match$2 = param.VAL;
  if (match$2[0] >= 5745024) {
    return "calc(" + (string_of_length(match$2[1]) + (" - " + (string_of_length(match$2[2]) + ")")));
  } else {
    return "calc(" + (string_of_length(match$2[1]) + (" + " + (string_of_length(match$2[2]) + ")")));
  }
}

function string_of_dimensions(dimensions) {
  return $$String.concat(" ", List.map(gridLengthToJs, dimensions));
}

function gridTemplateColumns(dimensions) {
  return d("gridTemplateColumns", string_of_dimensions(dimensions));
}

function gridTemplateRows(dimensions) {
  return d("gridTemplateRows", string_of_dimensions(dimensions));
}

function gridAutoColumns(dimensions) {
  return d("gridAutoColumns", string_of_dimension(dimensions));
}

function gridAutoRows(dimensions) {
  return d("gridAutoRows", string_of_dimension(dimensions));
}

function gridColumn(start, end$prime) {
  return d("gridColumn", start.toString() + (" / " + end$prime.toString()));
}

function gridRow(start, end$prime) {
  return d("gridRow", start.toString() + (" / " + end$prime.toString()));
}

function gridColumnStart(n) {
  return d("gridColumnStart", n.toString());
}

function gridColumnEnd(n) {
  return d("gridColumnEnd", n.toString());
}

function gridRowStart(n) {
  return d("gridRowStart", n.toString());
}

function gridRowEnd(n) {
  return d("gridRowEnd", n.toString());
}

function gridColumnGap(n) {
  return d("gridColumnGap", string_of_length(n));
}

function gridRowGap(n) {
  return d("gridRowGap", string_of_length(n));
}

function gridGap(n) {
  return d("gridGap", string_of_length(n));
}

function string_of_align(param) {
  if (param >= 98248149) {
    if (param >= 662439529) {
      if (param >= 924268066) {
        return "flex-end";
      } else {
        return "flex-start";
      }
    } else if (param >= 287825029) {
      return "baseline";
    } else {
      return "center";
    }
  } else if (param >= -162316795) {
    return "stretch";
  } else {
    return "auto";
  }
}

function alignItems(x) {
  return d("alignItems", string_of_align(x));
}

function alignSelf(x) {
  return d("alignSelf", string_of_align(x));
}

function string_of_justify(param) {
  if (param >= 98248149) {
    if (param >= 662439529) {
      if (param >= 924268066) {
        return "flex-end";
      } else {
        return "flex-start";
      }
    } else if (param >= 516682146) {
      return "space-between";
    } else {
      return "center";
    }
  } else if (param !== -485895757) {
    if (param >= -162316795) {
      return "stretch";
    } else {
      return "space-evenly";
    }
  } else {
    return "space-around";
  }
}

function justifyContent(x) {
  return d("justifyContent", string_of_justify(x));
}

function justifySelf(x) {
  return d("justifySelf", string_of_justify(x));
}

function alignContent(x) {
  return d("alignContent", string_of_justify(x));
}

function boxSizing(x) {
  return d("boxSizing", x !== -878767996 ? (
                x >= 9307263 ? (
                    x >= 653193961 ? "unset" : "border-box"
                  ) : (
                    x >= -601204732 ? "inherit" : "content-box"
                  )
              ) : "initial");
}

function $$float(x) {
  return d("float", x !== -922086728 ? (
                x >= -379319332 ? "right" : "left"
              ) : "none");
}

function clear(x) {
  return d("clear", x !== -944764921 ? (
                x >= -379319332 ? "right" : "both"
              ) : "left");
}

function overflow(x) {
  return d("overflow", string_of_overflow(x));
}

function overflowX(x) {
  return d("overflowX", string_of_overflow(x));
}

function overflowY(x) {
  return d("overflowY", string_of_overflow(x));
}

function zIndex(x) {
  return d("zIndex", x.toString());
}

function contentRule(x) {
  return d("content", "\"" + x + "\"");
}

function columnCount(x) {
  return d("columnCount", typeof x === "number" ? (
                x >= -601204732 ? (
                    x >= 653193961 ? "unset" : "inherit"
                  ) : (
                    x >= -878767996 ? "initial" : "auto"
                  )
              ) : x.VAL.toString());
}

function direction(x) {
  return d("direction", x !== -601204732 ? (
                x >= 5695082 ? (
                    x >= 653193961 ? "unset" : "rtl"
                  ) : (
                    x >= 5396714 ? "ltr" : "initial"
                  )
              ) : "inherit");
}

function string_of_filter(param) {
  if (typeof param === "number") {
    if (param >= -601204732) {
      if (param >= 653193961) {
        return "unset";
      } else {
        return "inherit";
      }
    } else if (param >= -878767996) {
      return "initial";
    } else {
      return "none";
    }
  }
  var variant = param.HASH;
  if (variant >= -97740042) {
    if (variant >= 5843823) {
      if (variant >= 934407426) {
        if (variant >= 1036870963) {
          return "hue-rotate(" + (string_of_angle(param.VAL) + ")");
        } else {
          return "contrast(" + (param.VAL.toString() + "%)");
        }
      } else if (variant >= 534308630) {
        return "invert(" + (param.VAL.toString() + "%)");
      } else {
        return "url(" + (param.VAL + ")");
      }
    } else if (variant >= -29929489) {
      return "saturate(" + (param.VAL.toString() + "%)");
    } else {
      return "sepia(" + (param.VAL.toString() + "%)");
    }
  }
  if (variant !== -594525841) {
    if (variant >= -345678389) {
      if (variant >= -214464569) {
        return "grayscale(" + (param.VAL.toString() + "%)");
      } else {
        return "opacity(" + (param.VAL.toString() + "%)");
      }
    } else if (variant >= -445542959) {
      return "brightness(" + (param.VAL.toString() + "%)");
    } else {
      return "blur(" + (string_of_length(param.VAL) + ")");
    }
  }
  var match = param.VAL;
  return "drop-shadow(" + (string_of_length(match[0]) + (" " + (string_of_length(match[1]) + (" " + (string_of_length(match[2]) + (" " + (string_of_color(match[3]) + ")")))))));
}

function filter(x) {
  return d("filter", join(" ", List.map(string_of_filter, x)));
}

function backfaceVisibility(x) {
  return d("backfaceVisibility", string_of_visibility(x));
}

function visibility(x) {
  return d("visibility", string_of_visibility(x));
}

function boxShadow(xOpt, yOpt, blurOpt, spreadOpt, insetOpt, color) {
  var x = xOpt !== undefined ? xOpt : /* zero */-789508312;
  var y = yOpt !== undefined ? yOpt : /* zero */-789508312;
  var blur = blurOpt !== undefined ? blurOpt : /* zero */-789508312;
  var spread = spreadOpt !== undefined ? spreadOpt : /* zero */-789508312;
  var inset = insetOpt !== undefined ? insetOpt : false;
  return {
          HASH: /* shadow */488687584,
          VAL: string_of_length(x) + (" " + (string_of_length(y) + (" " + (string_of_length(blur) + (" " + (string_of_length(spread) + (" " + (string_of_color(color) + (" " + (
                              inset ? "inset" : ""
                            ))))))))))
        };
}

function string_of_shadow(param) {
  return param.VAL;
}

function boxShadows(shadows) {
  return d("boxShadow", join(", ", List.map(string_of_shadow, shadows)));
}

function string_of_borderstyle(param) {
  if (param >= 568403505) {
    if (param >= 841979626) {
      return "dotted";
    } else {
      return "dashed";
    }
  } else if (param >= 12956715) {
    return "solid";
  } else {
    return "none";
  }
}

function border(px, style, color) {
  return d("border", string_of_length(px) + (" " + (string_of_borderstyle(style) + (" " + string_of_color(color)))));
}

function borderWidth(x) {
  return d("borderWidth", string_of_length(x));
}

function borderStyle(x) {
  return d("borderStyle", string_of_borderstyle(x));
}

function borderColor(x) {
  return d("borderColor", string_of_color(x));
}

function borderLeft(px, style, color) {
  return d("borderLeft", string_of_length(px) + (" " + (string_of_borderstyle(style) + (" " + string_of_color(color)))));
}

function borderLeftWidth(x) {
  return d("borderLeftWidth", string_of_length(x));
}

function borderLeftStyle(x) {
  return d("borderLeftStyle", string_of_borderstyle(x));
}

function borderLeftColor(x) {
  return d("borderLeftColor", string_of_color(x));
}

function borderRight(px, style, color) {
  return d("borderRight", string_of_length(px) + (" " + (string_of_borderstyle(style) + (" " + string_of_color(color)))));
}

function borderRightWidth(x) {
  return d("borderRightWidth", string_of_length(x));
}

function borderRightColor(x) {
  return d("borderRightColor", string_of_color(x));
}

function borderRightStyle(x) {
  return d("borderRightStyle", string_of_borderstyle(x));
}

function borderTop(px, style, color) {
  return d("borderTop", string_of_length(px) + (" " + (string_of_borderstyle(style) + (" " + string_of_color(color)))));
}

function borderTopWidth(x) {
  return d("borderTopWidth", string_of_length(x));
}

function borderTopStyle(x) {
  return d("borderTopStyle", string_of_borderstyle(x));
}

function borderTopColor(x) {
  return d("borderTopColor", string_of_color(x));
}

function borderBottom(px, style, color) {
  return d("borderBottom", string_of_length(px) + (" " + (string_of_borderstyle(style) + (" " + string_of_color(color)))));
}

function borderBottomWidth(x) {
  return d("borderBottomWidth", string_of_length(x));
}

function borderBottomStyle(x) {
  return d("borderBottomStyle", string_of_borderstyle(x));
}

function borderBottomColor(x) {
  return d("borderBottomColor", string_of_color(x));
}

function borderRadius(i) {
  return d("borderRadius", string_of_length(i));
}

function borderTopLeftRadius(i) {
  return d("borderTopLeftRadius", string_of_length(i));
}

function borderTopRightRadius(i) {
  return d("borderTopRightRadius", string_of_length(i));
}

function borderBottomLeftRadius(i) {
  return d("borderBottomLeftRadius", string_of_length(i));
}

function borderBottomRightRadius(i) {
  return d("borderBottomRightRadius", string_of_length(i));
}

function tableLayout(x) {
  return d("tableLayout", x >= 10615156 ? "fixed" : "auto");
}

function borderCollapse(x) {
  return d("borderCollapse", x >= 119283555 ? "separate" : "collapse");
}

function borderSpacing(i) {
  return d("borderSpacing", string_of_length(i));
}

function background(x) {
  return d("background", string_of_background(x));
}

function backgrounds(bg) {
  return d("background", join(", ", List.map(string_of_background, bg)));
}

function backgroundColor(x) {
  return d("backgroundColor", string_of_color(x));
}

function backgroundImage(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = "none";
  } else {
    var variant = x.HASH;
    if (variant !== -160280644) {
      if (variant >= 119548911) {
        if (variant >= 616379637) {
          var match = x.VAL;
          tmp = string_of_linearGradient(match[0], match[1]);
        } else {
          tmp = "radial-gradient(" + (string_of_stops(x.VAL) + ")");
        }
      } else {
        tmp = variant >= 5843823 ? "url(" + (x.VAL + ")") : "repeating-radial-gradient(" + (string_of_stops(x.VAL) + ")");
      }
    } else {
      var match$1 = x.VAL;
      tmp = string_of_repeatingLinearGradient(match$1[0], match$1[1]);
    }
  }
  return d("backgroundImage", tmp);
}

function backgroundAttachment(x) {
  return d("backgroundAttachment", x !== -118437525 ? (
                x >= 10615156 ? "fixed" : "scroll"
              ) : "local");
}

function backgroundClip(x) {
  return d("backgroundClip", x !== 9307263 ? (
                x >= 972575930 ? "padding-box" : "content-box"
              ) : "border-box");
}

function backgroundOrigin(x) {
  return d("backgroundOrigin", x !== 9307263 ? (
                x >= 972575930 ? "padding-box" : "content-box"
              ) : "border-box");
}

function backgroundPosition(x, y) {
  return d("backgroundPosition", string_of_length(x) + (" " + string_of_length(y)));
}

function backgroundRepeat(x) {
  return d("backgroundRepeat", x >= 646437021 ? (
                x >= 646437022 ? "repeat-y" : "repeat-x"
              ) : (
                x >= 108828507 ? "repeat" : "no-repeat"
              ));
}

function backgroundSize(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x !== -899416265 ? (
        x >= 427065300 ? "contain" : "auto"
      ) : "cover";
  } else {
    var match = x.VAL;
    tmp = string_of_length(match[0]) + (" " + string_of_length(match[1]));
  }
  return d("backgroundSize", tmp);
}

function cursor(x) {
  return d("cursor", string_of_cursor(x));
}

function clipPath(x) {
  return d("clipPath", "url(" + (x.VAL + ")"));
}

function string_of_listStyleType(param) {
  if (param >= -484197732) {
    if (param >= 700345660) {
      if (param >= 787279419) {
        if (param >= 826920258) {
          return "upper-latin";
        } else {
          return "upper-roman";
        }
      } else if (param >= 739986499) {
        return "lower-latin";
      } else {
        return "lower-roman";
      }
    } else if (param >= -422333295) {
      return "decimal";
    } else {
      return "upper-alpha";
    }
  } else if (param >= -703761904) {
    if (param >= -655228771) {
      if (param >= -571131491) {
        return "lower-alpha";
      } else {
        return "square";
      }
    } else if (param >= -699686657) {
      return "lower-greek";
    } else {
      return "circle";
    }
  } else if (param >= -922086728) {
    return "none";
  } else {
    return "disc";
  }
}

function string_of_listStylePosition(param) {
  if (param >= 501235708) {
    return "inside";
  } else {
    return "outside";
  }
}

function string_of_listStyleImage(param) {
  if (typeof param === "number") {
    return "none";
  } else {
    return "url(" + (param.VAL + ")");
  }
}

function listStyle(style, pos, img) {
  return d("listStyle", string_of_listStyleType(style) + (" " + (string_of_listStylePosition(pos) + (" " + string_of_listStyleImage(img)))));
}

function listStyleType(x) {
  return d("listStyleType", string_of_listStyleType(x));
}

function listStylePosition(x) {
  return d("listStylePosition", string_of_listStylePosition(x));
}

function listStyleImage(x) {
  return d("listStyleImage", string_of_listStyleImage(x));
}

function opacity(x) {
  return d("opacity", x.toString());
}

function string_of_outlineStyle(param) {
  if (param >= 472095738) {
    if (param !== 568403505) {
      if (param >= 852175633) {
        if (param >= 1042283741) {
          return "inset";
        } else {
          return "double";
        }
      } else if (param >= 841979626) {
        return "dotted";
      } else {
        return "grove";
      }
    } else {
      return "dashed";
    }
  } else if (param !== -862584982) {
    if (param >= 12956715) {
      if (param >= 209930196) {
        return "outset";
      } else {
        return "solid";
      }
    } else if (param >= -379468757) {
      return "ridge";
    } else {
      return "none";
    }
  } else {
    return "hidden";
  }
}

function outline(size, style, color) {
  return d("outline", string_of_length(size) + (" " + (string_of_outlineStyle(style) + (" " + string_of_color(color)))));
}

function outlineStyle(x) {
  return d("outlineStyle", string_of_outlineStyle(x));
}

function outlineWidth(x) {
  return d("outlineWidth", string_of_length(x));
}

function outlineColor(x) {
  return d("outlineColor", string_of_color(x));
}

function outlineOffset(x) {
  return d("outlineOffset", string_of_length(x));
}

function color(x) {
  return d("color", string_of_color(x));
}

function fontFamily(x) {
  return d("fontFamily", x);
}

function fontSize(x) {
  return d("fontSize", string_of_length_cascading(x));
}

function fontVariant(x) {
  return d("fontVariant", x !== -601204732 ? (
                x >= 653193961 ? (
                    x >= 812216871 ? "normal" : "unset"
                  ) : (
                    x >= -386684792 ? "small-caps" : "initial"
                  )
              ) : "inherit");
}

function fontStyle(x) {
  return d("fontStyle", string_of_fontStyle(x));
}

function fontWeight(x) {
  return d("fontWeight", string_of_fontWeight(x));
}

function lineHeight(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= -789508312 ? (
        x >= 653193961 ? (
            x >= 812216871 ? "normal" : "unset"
          ) : (
            x >= -601204732 ? "inherit" : "0"
          )
      ) : (
        x >= -878767996 ? "initial" : "auto"
      );
  } else {
    var variant = x.HASH;
    if (variant >= 22643) {
      tmp = variant >= 26418 ? (
          variant >= 4845682 ? (
              variant >= 5691738 ? x.VAL.toString() + "rem" : x.VAL.toString()
            ) : (
              variant >= 26433 ? x.VAL.toString() + "vw" : x.VAL.toString() + "vh"
            )
        ) : (
          variant >= 25092 ? (
              variant >= 25096 ? x.VAL.toString() + "px" : x.VAL.toString() + "pt"
            ) : (
              variant >= 24416 ? x.VAL.toString() + "mm" : x.VAL.toString() + "ex"
            )
        );
    } else if (variant >= -119887163) {
      tmp = variant >= 22186 ? (
          variant >= 22632 ? x.VAL.toString() + "em" : x.VAL.toString() + "cm"
        ) : (
          variant >= 22181 ? x.VAL.toString() + "ch" : x.VAL.toString() + "%"
        );
    } else if (variant >= -833472530) {
      tmp = variant >= -833470756 ? x.VAL.toString() + "vmin" : x.VAL.toString() + "vmax";
    } else if (variant >= -1040484748) {
      tmp = x.VAL.toString() + "px";
    } else {
      var match = x.VAL;
      tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
    }
  }
  return d("lineHeight", tmp);
}

function letterSpacing(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= -789508312 ? (
        x >= 653193961 ? (
            x >= 812216871 ? "normal" : "unset"
          ) : (
            x >= -601204732 ? "inherit" : "0"
          )
      ) : (
        x >= -878767996 ? "initial" : "auto"
      );
  } else {
    var variant = x.HASH;
    if (variant >= 22632) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? x.VAL.toString() + "rem" : x.VAL.toString() + "vw"
            ) : (
              variant >= 26418 ? x.VAL.toString() + "vh" : x.VAL.toString() + "px"
            )
        ) : (
          variant >= 24416 ? (
              variant >= 25092 ? x.VAL.toString() + "pt" : x.VAL.toString() + "mm"
            ) : (
              variant >= 22643 ? x.VAL.toString() + "ex" : x.VAL.toString() + "em"
            )
        );
    } else if (variant >= -833470756) {
      tmp = variant >= 22181 ? (
          variant >= 22186 ? x.VAL.toString() + "cm" : x.VAL.toString() + "ch"
        ) : (
          variant >= -119887163 ? x.VAL.toString() + "%" : x.VAL.toString() + "vmin"
        );
    } else if (variant !== -1040484748) {
      if (variant >= -833472530) {
        tmp = x.VAL.toString() + "vmax";
      } else {
        var match = x.VAL;
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = x.VAL.toString() + "px";
    }
  }
  return d("letterSpacing", tmp);
}

function textAlign(x) {
  return d("textAlign", x >= -379319332 ? (
                x >= 98248149 ? (
                    x >= 653193961 ? "unset" : "center"
                  ) : (
                    x >= 62250832 ? "justify" : "right"
                  )
              ) : (
                x !== -878767996 ? (
                    x >= -601204732 ? "inherit" : "left"
                  ) : "initial"
              ));
}

function textDecoration(x) {
  return d("textDecoration", x >= -601204732 ? (
                x >= 412155569 ? (
                    x >= 653193961 ? "unset" : "line-through"
                  ) : (
                    x >= 131142924 ? "underline" : "inherit"
                  )
              ) : (
                x !== -922086728 ? (
                    x >= -878767996 ? "initial" : "overline"
                  ) : "none"
              ));
}

function textDecorationColor(x) {
  return d("textDecorationColor", string_of_color(x));
}

function textDecorationStyle(x) {
  return d("textDecorationStyle", x >= 568403505 ? (
                x >= 841979626 ? (
                    x >= 852175633 ? "double" : "dotted"
                  ) : (
                    x >= 653193961 ? "unset" : "dashed"
                  )
              ) : (
                x >= -601204732 ? (
                    x >= 12956715 ? "solid" : "inherit"
                  ) : (
                    x >= -822975027 ? "wavy" : "initial"
                  )
              ));
}

function textIndent(x) {
  return d("textIndent", string_of_length(x));
}

function textOverflow(x) {
  return d("textOverflow", typeof x === "number" ? (
                x !== -878767996 ? (
                    x >= 166888785 ? (
                        x >= 653193961 ? "unset" : "ellipsis"
                      ) : (
                        x >= -601204732 ? "inherit" : "clip"
                      )
                  ) : "initial"
              ) : x.VAL);
}

function textShadow(xOpt, yOpt, blurOpt, color) {
  var x = xOpt !== undefined ? xOpt : /* zero */-789508312;
  var y = yOpt !== undefined ? yOpt : /* zero */-789508312;
  var blur = blurOpt !== undefined ? blurOpt : /* zero */-789508312;
  return {
          HASH: /* textShadow */-737064851,
          VAL: string_of_length(x) + (" " + (string_of_length(y) + (" " + (string_of_length(blur) + (" " + string_of_color(color))))))
        };
}

function string_of_textShadow(param) {
  return param.VAL;
}

function textShadows(textShadows$1) {
  return d("textShadow", join(", ", List.map(string_of_textShadow, textShadows$1)));
}

function textTransform(x) {
  return d("textTransform", x >= -509867604 ? (
                x >= -415330030 ? (
                    x >= 653193961 ? "unset" : "uppercase"
                  ) : (
                    x >= -425349839 ? "lowercase" : "capitalize"
                  )
              ) : (
                x !== -878767996 ? (
                    x >= -601204732 ? "inherit" : "none"
                  ) : "initial"
              ));
}

function userSelect(x) {
  return d("userSelect", x >= -856044371 ? (
                x >= 4847905 ? (
                    x >= 653193961 ? "unset" : "all"
                  ) : (
                    x >= -601204732 ? "inherit" : "text"
                  )
              ) : (
                x !== -922086728 ? (
                    x >= -878767996 ? "initial" : "auto"
                  ) : "none"
              ));
}

function verticalAlign(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= 5745024 ? (
        x >= 287825029 ? (
            x >= 516406248 ? (
                x >= 653193961 ? "unset" : "text-top"
              ) : (
                x >= 476669816 ? "text-bottom" : "baseline"
              )
          ) : (
            x !== 5793429 ? (
                x >= 79692155 ? "super" : "sub"
              ) : "top"
          )
      ) : (
        x >= -866200747 ? (
            x >= -601204732 ? (
                x >= -445061397 ? "bottom" : "inherit"
              ) : (
                x >= -789508312 ? "0" : "middle"
              )
          ) : (
            x >= -878767996 ? "initial" : "auto"
          )
      );
  } else {
    var variant = x.HASH;
    if (variant >= 22632) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? x.VAL.toString() + "rem" : x.VAL.toString() + "vw"
            ) : (
              variant >= 26418 ? x.VAL.toString() + "vh" : x.VAL.toString() + "px"
            )
        ) : (
          variant >= 24416 ? (
              variant >= 25092 ? x.VAL.toString() + "pt" : x.VAL.toString() + "mm"
            ) : (
              variant >= 22643 ? x.VAL.toString() + "ex" : x.VAL.toString() + "em"
            )
        );
    } else if (variant >= -833470756) {
      tmp = variant >= 22181 ? (
          variant >= 22186 ? x.VAL.toString() + "cm" : x.VAL.toString() + "ch"
        ) : (
          variant >= -119887163 ? x.VAL.toString() + "%" : x.VAL.toString() + "vmin"
        );
    } else if (variant !== -1040484748) {
      if (variant >= -833472530) {
        tmp = x.VAL.toString() + "vmax";
      } else {
        var match = x.VAL;
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = x.VAL.toString() + "px";
    }
  }
  return d("verticalAlign", tmp);
}

function whiteSpace(x) {
  return d("whiteSpace", x >= 653193961 ? (
                x >= 812216871 ? (
                    x >= 867913355 ? "nowrap" : "normal"
                  ) : (
                    x >= 660870029 ? "pre-wrap" : "unset"
                  )
              ) : (
                x >= 5595171 ? (
                    x >= 538440119 ? "pre-line" : "pre"
                  ) : (
                    x >= -601204732 ? "inherit" : "initial"
                  )
              ));
}

function wordBreak(x) {
  return d("wordBreak", x >= -323760734 ? (
                x >= 812216871 ? (
                    x >= 892748188 ? "keep-all" : "normal"
                  ) : (
                    x >= 653193961 ? "unset" : "break-all"
                  )
              ) : (
                x >= -601204732 ? "inherit" : "initial"
              ));
}

function wordSpacing(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= -789508312 ? (
        x >= 653193961 ? (
            x >= 812216871 ? "normal" : "unset"
          ) : (
            x >= -601204732 ? "inherit" : "0"
          )
      ) : (
        x >= -878767996 ? "initial" : "auto"
      );
  } else {
    var variant = x.HASH;
    if (variant >= 22632) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? x.VAL.toString() + "rem" : x.VAL.toString() + "vw"
            ) : (
              variant >= 26418 ? x.VAL.toString() + "vh" : x.VAL.toString() + "px"
            )
        ) : (
          variant >= 24416 ? (
              variant >= 25092 ? x.VAL.toString() + "pt" : x.VAL.toString() + "mm"
            ) : (
              variant >= 22643 ? x.VAL.toString() + "ex" : x.VAL.toString() + "em"
            )
        );
    } else if (variant >= -833470756) {
      tmp = variant >= 22181 ? (
          variant >= 22186 ? x.VAL.toString() + "cm" : x.VAL.toString() + "ch"
        ) : (
          variant >= -119887163 ? x.VAL.toString() + "%" : x.VAL.toString() + "vmin"
        );
    } else if (variant !== -1040484748) {
      if (variant >= -833472530) {
        tmp = x.VAL.toString() + "vmax";
      } else {
        var match = x.VAL;
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = x.VAL.toString() + "px";
    }
  }
  return d("wordSpacing", tmp);
}

function wordWrap(x) {
  return d("wordWrap", x !== -601204732 ? (
                x >= 812216871 ? (
                    x >= 1059921449 ? "break-word" : "normal"
                  ) : (
                    x >= 653193961 ? "unset" : "initial"
                  )
              ) : "inherit");
}

function string_of_pointerEvents(param) {
  if (param >= -922086728) {
    return "none";
  } else {
    return "auto";
  }
}

function pointerEvents(x) {
  return d("pointerEvents", string_of_pointerEvents(x));
}

function string_of_transform(param) {
  var variant = param.HASH;
  if (variant >= -120664438) {
    if (variant >= 106728778) {
      if (variant >= 178189215) {
        if (variant >= 1009117838) {
          switch (variant - 1009117838 | 0) {
            case 0 :
                return "scaleX(" + (param.VAL.toString() + ")");
            case 1 :
                return "scaleY(" + (param.VAL.toString() + ")");
            case 2 :
                return "scaleZ(" + (param.VAL.toString() + ")");
            
          }
        } else {
          var match = param.VAL;
          return string_of_translate3d(match[0], match[1], match[2]);
        }
      } else {
        if (variant >= 142802924) {
          var match$1 = param.VAL;
          return "rotate3d(" + (match$1[0].toString() + (", " + (match$1[1].toString() + (", " + (match$1[2].toString() + (", " + (string_of_angle(match$1[3]) + ")")))))));
        }
        switch (variant - 106728778 | 0) {
          case 0 :
              return "translateX(" + (string_of_length(param.VAL) + ")");
          case 1 :
              return "translateY(" + (string_of_length(param.VAL) + ")");
          case 2 :
              return "translateZ(" + (string_of_length(param.VAL) + ")");
          
        }
      }
    } else {
      if (variant === -31746546) {
        return "skewX(" + (string_of_angle(param.VAL) + ")");
      }
      if (variant >= -31746545) {
        return "skewY(" + (string_of_angle(param.VAL) + ")");
      }
      var match$2 = param.VAL;
      return string_of_scale(match$2[0], match$2[1]);
    }
  } else if (variant >= -887077285) {
    if (variant >= -452513317) {
      if (variant >= -249738851) {
        switch (variant + 249738851 | 0) {
          case 0 :
              return "rotateX(" + (string_of_angle(param.VAL) + ")");
          case 1 :
              return "rotateY(" + (string_of_angle(param.VAL) + ")");
          case 2 :
              return "rotateZ(" + (string_of_angle(param.VAL) + ")");
          
        }
      } else {
        var match$3 = param.VAL;
        return "scale3d(" + (match$3[0].toString() + (", " + (match$3[1].toString() + (", " + (match$3[2].toString() + ")")))));
      }
    } else {
      if (variant < -866839798) {
        return "rotate(" + (string_of_angle(param.VAL) + ")");
      }
      var match$4 = param.VAL;
      return "skew(" + (string_of_angle(match$4[0]) + (", " + (string_of_angle(match$4[1]) + ")")));
    }
  } else {
    if (variant < -914368690) {
      return "perspective(" + (param.VAL.toString() + ")");
    }
    var match$5 = param.VAL;
    return "translate(" + (string_of_length(match$5[0]) + (", " + (string_of_length(match$5[1]) + ")")));
  }
}

function transform(x) {
  return d("transform", string_of_transform(x));
}

function transforms(xs) {
  return d("transform", join(" ", List.map(string_of_transform, xs)));
}

function transformOrigin(x, y) {
  return d("transformOrigin", string_of_length(x) + (" " + string_of_length(y)));
}

function transformOrigin3d(x, y, z) {
  return d("transformOrigin", string_of_length(x) + (" " + (string_of_length(y) + (" " + (string_of_length(z) + " ")))));
}

function transformStyle(x) {
  return d("transformStyle", x >= 589702045 ? "preserve-3d" : "flat");
}

function perspective(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= -789508312 ? "0" : "none";
  } else {
    var variant = x.HASH;
    if (variant >= 22632) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? x.VAL.toString() + "rem" : x.VAL.toString() + "vw"
            ) : (
              variant >= 26418 ? x.VAL.toString() + "vh" : x.VAL.toString() + "px"
            )
        ) : (
          variant >= 24416 ? (
              variant >= 25092 ? x.VAL.toString() + "pt" : x.VAL.toString() + "mm"
            ) : (
              variant >= 22643 ? x.VAL.toString() + "ex" : x.VAL.toString() + "em"
            )
        );
    } else if (variant >= -833470756) {
      tmp = variant >= 22181 ? (
          variant >= 22186 ? x.VAL.toString() + "cm" : x.VAL.toString() + "ch"
        ) : (
          variant >= -119887163 ? x.VAL.toString() + "%" : x.VAL.toString() + "vmin"
        );
    } else if (variant !== -1040484748) {
      if (variant >= -833472530) {
        tmp = x.VAL.toString() + "vmax";
      } else {
        var match = x.VAL;
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = x.VAL.toString() + "px";
    }
  }
  return d("perspective", tmp);
}

function string_of_timingFunction(param) {
  if (typeof param === "number") {
    if (param >= -193525386) {
      if (param >= 138027891) {
        return "ease-out";
      } else if (param >= 20933615) {
        return "step-end";
      } else {
        return "step-start";
      }
    } else if (param !== -960651557) {
      if (param >= -325037595) {
        return "linear";
      } else {
        return "ease";
      }
    } else {
      return "ease-in-out";
    }
  }
  if (param.HASH >= 68058023) {
    var match = param.VAL;
    var i = match[0];
    if (match[1] >= 67859554) {
      return "steps(" + (i.toString() + ", start)");
    } else {
      return "steps(" + (i.toString() + ", end)");
    }
  }
  var match$1 = param.VAL;
  return "cubic-bezier(" + (match$1[0].toString() + (", " + (match$1[1].toString() + (", " + (match$1[2].toString() + (", " + (match$1[3].toString() + ")")))))));
}

function transition(durationOpt, delayOpt, timingFunctionOpt, property) {
  var duration = durationOpt !== undefined ? durationOpt : 0;
  var delay = delayOpt !== undefined ? delayOpt : 0;
  var timingFunction = timingFunctionOpt !== undefined ? timingFunctionOpt : /* ease */-1022587922;
  return {
          HASH: /* transition */-659583595,
          VAL: duration.toString() + "ms " + (string_of_timingFunction(timingFunction) + (" " + (delay.toString() + "ms " + property)))
        };
}

function transitions(xs) {
  return d("transition", join(", ", List.map((function (param) {
                        return param.VAL;
                      }), xs)));
}

function transitionDelay(i) {
  return d("transitionDelay", i.toString() + "ms");
}

function transitionDuration(i) {
  return d("transitionDuration", i.toString() + "ms");
}

function transitionTimingFunction(x) {
  return d("transitionTimingFunction", string_of_timingFunction(x));
}

function transitionProperty(x) {
  return d("transitionProperty", x);
}

function perspectiveOrigin(x, y) {
  return d("perspectiveOrigin", string_of_length(x) + (" " + string_of_length(y)));
}

function string_of_animationDirection(param) {
  if (param >= 812216871) {
    if (param >= 892586298) {
      return "alternate";
    } else {
      return "normal";
    }
  } else if (param >= 545428232) {
    return "alternate-reverse";
  } else {
    return "reverse";
  }
}

function string_of_animationFillMode(param) {
  if (param >= 245861168) {
    if (param >= 733653774) {
      return "forwards";
    } else {
      return "backwards";
    }
  } else if (param >= -922086728) {
    return "none";
  } else {
    return "both";
  }
}

function string_of_animationIterationCount(param) {
  if (typeof param === "number") {
    return "infinite";
  } else {
    return param.VAL.toString();
  }
}

function string_of_animationPlayState(param) {
  if (param >= -276545362) {
    return "paused";
  } else {
    return "running";
  }
}

function animation(durationOpt, delayOpt, directionOpt, timingFunctionOpt, fillModeOpt, playStateOpt, iterationCountOpt, name) {
  var duration = durationOpt !== undefined ? durationOpt : 0;
  var delay = delayOpt !== undefined ? delayOpt : 0;
  var direction = directionOpt !== undefined ? directionOpt : /* normal */812216871;
  var timingFunction = timingFunctionOpt !== undefined ? timingFunctionOpt : /* ease */-1022587922;
  var fillMode = fillModeOpt !== undefined ? fillModeOpt : /* none */-922086728;
  var playState = playStateOpt !== undefined ? playStateOpt : /* running */-345412097;
  var iterationCount = iterationCountOpt !== undefined ? iterationCountOpt : ({
        HASH: /* count */-899463985,
        VAL: 1
      });
  return {
          HASH: /* animation */-885723388,
          VAL: name + (" " + (duration.toString() + "ms " + (string_of_timingFunction(timingFunction) + (" " + (delay.toString() + "ms " + (string_of_animationIterationCount(iterationCount) + (" " + (string_of_animationDirection(direction) + (" " + (string_of_animationFillMode(fillMode) + (" " + string_of_animationPlayState(playState))))))))))))
        };
}

function string_of_animation(param) {
  return param.VAL;
}

function animations(xs) {
  return d("animation", join(", ", List.map(string_of_animation, xs)));
}

function animationDelay(x) {
  return d("animationDelay", x.toString() + "ms");
}

function animationDirection(x) {
  return d("animationDirection", string_of_animationDirection(x));
}

function animationDuration(x) {
  return d("animationDuration", x.toString() + "ms");
}

function animationFillMode(x) {
  return d("animationFillMode", string_of_animationFillMode(x));
}

function animationIterationCount(x) {
  return d("animationIterationCount", string_of_animationIterationCount(x));
}

function animationName(x) {
  return d("animationName", x);
}

function animationPlayState(x) {
  return d("animationPlayState", string_of_animationPlayState(x));
}

function animationTimingFunction(x) {
  return d("animationTimingFunction", string_of_timingFunction(x));
}

function selector(selector$1, rules) {
  return {
          HASH: /* selector */829240095,
          VAL: [
            selector$1,
            rules
          ]
        };
}

function active(param) {
  return selector(":active", param);
}

function after(param) {
  return selector("::after", param);
}

function before(param) {
  return selector("::before", param);
}

function checked(param) {
  return selector(":checked", param);
}

function children(param) {
  return selector(" > *", param);
}

function directSibling(param) {
  return selector(" + ", param);
}

function disabled(param) {
  return selector(":disabled", param);
}

function firstChild(param) {
  return selector(":first-child", param);
}

function firstOfType(param) {
  return selector(":first-of-type", param);
}

function focus(param) {
  return selector(":focus", param);
}

function hover(param) {
  return selector(":hover", param);
}

function lastChild(param) {
  return selector(":last-child", param);
}

function lastOfType(param) {
  return selector(":last-of-type", param);
}

function link(param) {
  return selector(":link", param);
}

function readOnly(param) {
  return selector(":read-only", param);
}

function required(param) {
  return selector(":required", param);
}

function visited(param) {
  return selector(":visited", param);
}

function enabled(param) {
  return selector(":enabled", param);
}

function noContent(param) {
  return selector(":empty", param);
}

function $$default(param) {
  return selector(":default", param);
}

function anyLink(param) {
  return selector(":any-link", param);
}

function onlyChild(param) {
  return selector(":only-child", param);
}

function onlyOfType(param) {
  return selector(":only-of-type", param);
}

function optional(param) {
  return selector(":optional", param);
}

function invalid(param) {
  return selector(":invalid", param);
}

function outOfRange(param) {
  return selector(":out-of-range", param);
}

function siblings(param) {
  return selector(" ~ ", param);
}

function target(param) {
  return selector(":target", param);
}

function firstLine(param) {
  return selector("::first-line", param);
}

function firstLetter(param) {
  return selector("::first-letter", param);
}

function selection(param) {
  return selector("::selection", param);
}

function placeholder(param) {
  return selector("::placeholder", param);
}

function media(query, rules) {
  return {
          HASH: /* selector */829240095,
          VAL: [
            "@media " + query,
            rules
          ]
        };
}

function fill(color) {
  return d("fill", string_of_color(color));
}

function fillOpacity(opacity) {
  return d("fillOpacity", opacity.toString());
}

function fillRule(x) {
  return d("fillRule", x >= 110563029 ? "evenodd" : "nonzero");
}

function stroke(color) {
  return d("stroke", string_of_color(color));
}

function strokeWidth(length) {
  return d("strokeWidth", string_of_length(length));
}

function strokeOpacity(opacity) {
  return d("strokeOpacity", opacity.toString());
}

function strokeMiterlimit(x) {
  return d("strokeMiterlimit", x.toString());
}

function strokeLinecap(x) {
  return d("strokeLinecap", x !== -655228771 ? (
                x >= -312084402 ? "round" : "butt"
              ) : "square");
}

function strokeLinejoin(x) {
  return d("strokeLinejoin", x !== 141361157 ? (
                x >= 811681914 ? "bevel" : "round"
              ) : "miter");
}

function stopColor(c) {
  return d("stopColor", string_of_color(c));
}

function stopOpacity(o) {
  return d("stopOpacity", o.toString());
}

var SVG = {
  fill: fill,
  fillOpacity: fillOpacity,
  fillRule: fillRule,
  stroke: stroke,
  strokeWidth: strokeWidth,
  strokeOpacity: strokeOpacity,
  strokeMiterlimit: strokeMiterlimit,
  strokeLinecap: strokeLinecap,
  strokeLinejoin: strokeLinejoin,
  stopColor: stopColor,
  stopOpacity: stopOpacity
};

var empty = /* [] */0;

var initial = /* initial */-878767996;

var inherit_ = /* inherit_ */-601204732;

var unset = /* unset */653193961;

var rtl = /* rtl */5695082;

var ltr = /* ltr */5396714;

var zero = /* zero */-789508312;

var horizontal = /* horizontal */365165796;

var vertical = /* vertical */-367674250;

var absolute = /* absolute */-1013592457;

var all = /* all */4847905;

var auto = /* auto */-1065951377;

var backwards = /* backwards */245861168;

var baseline = /* baseline */287825029;

var borderBox = /* borderBox */9307263;

var both = /* both */-1055160191;

var center = /* center */98248149;

var column = /* column */-963948842;

var columnReverse = /* columnReverse */135477484;

var contain = /* contain */427065300;

var contentBox = /* contentBox */-1008848302;

var cover = /* cover */-899416265;

var dashed = /* dashed */568403505;

var dotted = /* dotted */841979626;

var ease = /* ease */-1022587922;

var easeIn = /* easeIn */138027891;

var easeInOut = /* easeInOut */-960651557;

var easeOut = /* easeOut */715748672;

var fixed = /* fixed */10615156;

var flexEnd = /* flexEnd */924268066;

var flexStart = /* flexStart */662439529;

var forwards = /* forwards */733653774;

var hidden = /* hidden */-862584982;

var infinite = /* infinite */-630647084;

var inline = /* inline */423610969;

var block = /* block */888960333;

var contents = /* contents */790889754;

var flexBox = /* flex */-1010954439;

var grid = /* grid */-999565626;

var inlineBlock = /* inlineBlock */-147785676;

var inlineFlex = /* inlineFlex */53323314;

var inlineGrid = /* inlineGrid */64712127;

var inlineTable = /* inlineTable */-854050059;

var listItem = /* listItem */632591505;

var runIn = /* runIn */-245903344;

var table = /* table */182695950;

var tableCaption = /* tableCaption */1054826616;

var tableColumnGroup = /* tableColumnGroup */850209563;

var tableHeaderGroup = /* tableHeaderGroup */606419204;

var tableFooterGroup = /* tableFooterGroup */-1045696202;

var tableRowGroup = /* tableRowGroup */-836725517;

var tableCell = /* tableCell */793912528;

var tableColumn = /* tableColumn */97122692;

var tableRow = /* tableRow */-843129172;

var linear = /* linear */-325037595;

var local = /* local */-118437525;

var none = /* none */-922086728;

var noRepeat = /* noRepeat */-695430532;

var nowrap = /* nowrap */867913355;

var paddingBox = /* paddingBox */972575930;

var paused = /* paused */-276545362;

var relative = /* relative */903134412;

var repeat = /* repeat */108828507;

var minmax = /* minmax */-754859950;

var repeatX = /* repeatX */646437021;

var repeatY = /* repeatY */646437022;

var row = /* row */5693978;

var rowReverse = /* rowReverse */378951208;

var running = /* running */-345412097;

var scroll = /* scroll */-949692403;

var solid = /* solid */12956715;

var spaceAround = /* spaceAround */-485895757;

var spaceBetween = /* spaceBetween */516682146;

var spaceEvenly = /* spaceEvenly */-1016061555;

var $$static = /* static */100392110;

var stepEnd = /* stepEnd */20933615;

var stepStart = /* stepStart */-193525386;

var sticky = /* sticky */188263721;

var stretch = /* stretch */-162316795;

var text = /* text */-856044371;

var visible = /* visible */589592690;

var wrap = /* wrap */-822134326;

var wrapReverse = /* wrapReverse */-463121288;

var inside = /* inside */501235708;

var outside = /* outside */-430011099;

var italic = /* italic */107228912;

var oblique = /* oblique */734792881;

var underline = /* underline */131142924;

var overline = /* overline */-986651832;

var lineThrough = /* lineThrough */412155569;

var clip = /* clip */-1044222256;

var ellipsis = /* ellipsis */166888785;

var wavy = /* wavy */-822975027;

var $$double = /* double */852175633;

var uppercase = /* uppercase */-415330030;

var lowercase = /* lowercase */-425349839;

var capitalize = /* capitalize */-509867604;

var sub = /* sub */5745024;

var $$super = /* super */79692155;

var textTop = /* textTop */516406248;

var textBottom = /* textBottom */476669816;

var middle = /* middle */-866200747;

var normal = /* normal */812216871;

var breakAll = /* breakAll */-323760734;

var keepAll = /* keepAll */892748188;

var breakWord = /* breakWord */1059921449;

var reverse = /* reverse */452737314;

var alternate = /* alternate */892586298;

var alternateReverse = /* alternateReverse */545428232;

var fill$1 = /* fill */-1011102077;

var content = /* content */427265337;

var maxContent = /* maxContent */60557045;

var minContent = /* minContent */-550577721;

var fitContent = /* fitContent */-195805336;

var round = /* round */-312084402;

var miter = /* miter */141361157;

var bevel = /* bevel */811681914;

var butt = /* butt */-1054861805;

var square = /* square */-655228771;

var unsafe = d;

var thin = /* thin */-855898535;

var extraLight = /* extraLight */-21160922;

var light = /* light */-184774442;

var medium = /* medium */-20425611;

var semiBold = /* semiBold */-812709613;

var bold = /* bold */-1055161979;

var extraBold = /* extraBold */-81801163;

var lighter = /* lighter */434326211;

var bolder = /* bolder */-534575822;

export {
  style ,
  join ,
  string_of_float ,
  string_of_int ,
  Converter ,
  string_of_length ,
  string_of_angle ,
  string_of_rgb ,
  string_of_rgba ,
  string_of_p3 ,
  string_of_percent ,
  string_of_hsl ,
  string_of_alpha ,
  string_of_color ,
  string_of_stops ,
  string_of_linearGradient ,
  string_of_repeatingLinearGradient ,
  string_of_translate3d ,
  string_of_scale ,
  string_of_time ,
  string_of_overflow ,
  string_of_visibility ,
  string_of_background ,
  string_of_cursor ,
  string_of_fontWeight ,
  string_of_fontStyle ,
  string_of_flex ,
  string_of_flexBasis ,
  empty ,
  d ,
  important ,
  label ,
  initial ,
  inherit_ ,
  unset ,
  rtl ,
  ltr ,
  deg ,
  rad ,
  grad ,
  turn ,
  pct ,
  rgb ,
  rgba ,
  linearGradient ,
  repeatingLinearGradient ,
  radialGradient ,
  repeatingRadialGradient ,
  string_of_length_cascading ,
  ch ,
  cm ,
  em ,
  ex ,
  fr ,
  mm ,
  pt ,
  px ,
  pxFloat ,
  rem ,
  vh ,
  vmax ,
  vmin ,
  vw ,
  zero ,
  Calc ,
  size ,
  resize ,
  horizontal ,
  vertical ,
  absolute ,
  all ,
  auto ,
  backwards ,
  baseline ,
  borderBox ,
  both ,
  center ,
  column ,
  columnReverse ,
  contain ,
  contentBox ,
  count ,
  cover ,
  cubicBesier ,
  dashed ,
  dotted ,
  ease ,
  easeIn ,
  easeInOut ,
  easeOut ,
  fixed ,
  flexEnd ,
  flexStart ,
  forwards ,
  hidden ,
  infinite ,
  inline ,
  block ,
  contents ,
  flexBox ,
  grid ,
  inlineBlock ,
  inlineFlex ,
  inlineGrid ,
  inlineTable ,
  listItem ,
  runIn ,
  table ,
  tableCaption ,
  tableColumnGroup ,
  tableHeaderGroup ,
  tableFooterGroup ,
  tableRowGroup ,
  tableCell ,
  tableColumn ,
  tableRow ,
  linear ,
  local ,
  localUrl ,
  none ,
  noRepeat ,
  nowrap ,
  paddingBox ,
  paused ,
  relative ,
  repeat ,
  minmax ,
  repeatX ,
  repeatY ,
  rotate ,
  rotate3d ,
  rotateX ,
  rotateY ,
  rotateZ ,
  row ,
  rowReverse ,
  running ,
  scale ,
  scale3d ,
  scaleX ,
  scaleY ,
  scaleZ ,
  scroll ,
  skew ,
  skewX ,
  skewY ,
  solid ,
  spaceAround ,
  spaceBetween ,
  spaceEvenly ,
  $$static ,
  stepEnd ,
  steps ,
  stepStart ,
  sticky ,
  stretch ,
  text ,
  translate ,
  translate3d ,
  translateX ,
  translateY ,
  translateZ ,
  url ,
  visible ,
  wrap ,
  wrapReverse ,
  inside ,
  outside ,
  italic ,
  oblique ,
  underline ,
  overline ,
  lineThrough ,
  clip ,
  ellipsis ,
  wavy ,
  $$double ,
  uppercase ,
  lowercase ,
  capitalize ,
  sub ,
  $$super ,
  textTop ,
  textBottom ,
  middle ,
  normal ,
  breakAll ,
  keepAll ,
  breakWord ,
  reverse ,
  alternate ,
  alternateReverse ,
  fill$1 as fill,
  content ,
  maxContent ,
  minContent ,
  fitContent ,
  round ,
  miter ,
  bevel ,
  butt ,
  square ,
  unsafe ,
  display ,
  position ,
  top ,
  bottom ,
  left ,
  right ,
  flex ,
  flex3 ,
  flexGrow ,
  flexShrink ,
  flexBasis ,
  flexDirection ,
  flexWrap ,
  order ,
  string_of_margin ,
  margin ,
  margin2 ,
  margin3 ,
  margin4 ,
  marginLeft ,
  marginRight ,
  marginTop ,
  marginBottom ,
  padding ,
  padding2 ,
  padding3 ,
  padding4 ,
  paddingLeft ,
  paddingRight ,
  paddingTop ,
  paddingBottom ,
  string_of_minmax ,
  string_of_dimension ,
  width ,
  height ,
  minWidth ,
  maxWidth ,
  minHeight ,
  maxHeight ,
  gridAutoDirectionToJs ,
  gridAutoFlow ,
  repeatValueToJs ,
  gridLengthToJs ,
  string_of_dimensions ,
  gridTemplateColumns ,
  gridTemplateRows ,
  gridAutoColumns ,
  gridAutoRows ,
  gridColumn ,
  gridRow ,
  gridColumnStart ,
  gridColumnEnd ,
  gridRowStart ,
  gridRowEnd ,
  gridColumnGap ,
  gridRowGap ,
  gridGap ,
  string_of_align ,
  alignItems ,
  alignSelf ,
  string_of_justify ,
  justifyContent ,
  justifySelf ,
  alignContent ,
  boxSizing ,
  $$float ,
  clear ,
  overflow ,
  overflowX ,
  overflowY ,
  zIndex ,
  contentRule ,
  columnCount ,
  direction ,
  string_of_filter ,
  filter ,
  backfaceVisibility ,
  visibility ,
  boxShadow ,
  string_of_shadow ,
  boxShadows ,
  string_of_borderstyle ,
  border ,
  borderWidth ,
  borderStyle ,
  borderColor ,
  borderLeft ,
  borderLeftWidth ,
  borderLeftStyle ,
  borderLeftColor ,
  borderRight ,
  borderRightWidth ,
  borderRightColor ,
  borderRightStyle ,
  borderTop ,
  borderTopWidth ,
  borderTopStyle ,
  borderTopColor ,
  borderBottom ,
  borderBottomWidth ,
  borderBottomStyle ,
  borderBottomColor ,
  borderRadius ,
  borderTopLeftRadius ,
  borderTopRightRadius ,
  borderBottomLeftRadius ,
  borderBottomRightRadius ,
  tableLayout ,
  borderCollapse ,
  borderSpacing ,
  background ,
  backgrounds ,
  backgroundColor ,
  backgroundImage ,
  backgroundAttachment ,
  backgroundClip ,
  backgroundOrigin ,
  backgroundPosition ,
  backgroundRepeat ,
  backgroundSize ,
  cursor ,
  clipPath ,
  string_of_listStyleType ,
  string_of_listStylePosition ,
  string_of_listStyleImage ,
  listStyle ,
  listStyleType ,
  listStylePosition ,
  listStyleImage ,
  opacity ,
  string_of_outlineStyle ,
  outline ,
  outlineStyle ,
  outlineWidth ,
  outlineColor ,
  outlineOffset ,
  thin ,
  extraLight ,
  light ,
  medium ,
  semiBold ,
  bold ,
  extraBold ,
  lighter ,
  bolder ,
  color ,
  fontFamily ,
  fontSize ,
  fontVariant ,
  fontStyle ,
  fontWeight ,
  lineHeight ,
  letterSpacing ,
  textAlign ,
  textDecoration ,
  textDecorationColor ,
  textDecorationStyle ,
  textIndent ,
  textOverflow ,
  textShadow ,
  string_of_textShadow ,
  textShadows ,
  textTransform ,
  userSelect ,
  verticalAlign ,
  whiteSpace ,
  wordBreak ,
  wordSpacing ,
  wordWrap ,
  string_of_pointerEvents ,
  pointerEvents ,
  string_of_transform ,
  transform ,
  transforms ,
  transformOrigin ,
  transformOrigin3d ,
  transformStyle ,
  perspective ,
  string_of_timingFunction ,
  transition ,
  transitions ,
  transitionDelay ,
  transitionDuration ,
  transitionTimingFunction ,
  transitionProperty ,
  perspectiveOrigin ,
  string_of_animationDirection ,
  string_of_animationFillMode ,
  string_of_animationIterationCount ,
  string_of_animationPlayState ,
  animation ,
  string_of_animation ,
  animations ,
  animationDelay ,
  animationDirection ,
  animationDuration ,
  animationFillMode ,
  animationIterationCount ,
  animationName ,
  animationPlayState ,
  animationTimingFunction ,
  selector ,
  active ,
  after ,
  before ,
  checked ,
  children ,
  directSibling ,
  disabled ,
  firstChild ,
  firstOfType ,
  focus ,
  hover ,
  lastChild ,
  lastOfType ,
  link ,
  readOnly ,
  required ,
  visited ,
  enabled ,
  noContent ,
  $$default ,
  $$default as default,
  anyLink ,
  onlyChild ,
  onlyOfType ,
  optional ,
  invalid ,
  outOfRange ,
  siblings ,
  target ,
  firstLine ,
  firstLetter ,
  selection ,
  placeholder ,
  media ,
  SVG ,
  
}
/* No side effect */
