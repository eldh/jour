// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var InvalidValue = /* @__PURE__ */Caml_exceptions.create("Lab.InvalidValue");

var toPrecision = ((a, b) => Number(b.toPrecision(a)));

function toFixed(i0, f) {
  var i = i0;
  if (f >= 1) {
    return toPrecision(i0, f);
  }
  var multiplier = Math.pow(10, i);
  return (multiplier * f + 0.5 | 0) / multiplier;
}

function clamp(minVal, maxVal, v) {
  if (Caml_obj.caml_lessthan(v, minVal)) {
    return minVal;
  } else if (Caml_obj.caml_greaterthan(v, maxVal)) {
    return maxVal;
  } else {
    return v;
  }
}

function multiplyMatrix(param, param$1) {
  var c = param$1[2];
  var b = param$1[1];
  var a = param$1[0];
  var match = param[2];
  var match$1 = param[1];
  var match$2 = param[0];
  return [
          match$2[0] * a + match$2[1] * b + match$2[2] * c,
          match$1[0] * a + match$1[1] * b + match$1[2] * c,
          match[0] * a + match[1] * b + match[2] * c
        ];
}

function mapTriple(fn, param) {
  return [
          Curry._1(fn, param[0]),
          Curry._1(fn, param[1]),
          Curry._1(fn, param[2])
        ];
}

function intOfFloat(f) {
  return f + 0.5 | 0;
}

function rgbClamp(param) {
  return clamp(0, 255, param);
}

function p3Clamp(a) {
  return toPrecision(4, clamp(0, 1.0, a));
}

function toInt(f) {
  return f + 0.5 | 0;
}

function rgbGamma(r) {
  if (r <= 0.0031308) {
    return 12.92 * r;
  } else {
    return 1.055 * Math.pow(r, 1 / 2.4) - 0.055;
  }
}

function srgbGamma(r) {
  return 255 * rgbGamma(r);
}

function rgbLinear(r) {
  if (r <= 0.04045) {
    return r / 12.92;
  } else {
    return Math.pow((r + 0.055) / 1.055, 2.4);
  }
}

function srgbLinear(r) {
  return rgbLinear(r / 255);
}

var partial_arg = [
  [
    0.4124564,
    0.3575761,
    0.1804375
  ],
  [
    0.2126729,
    0.7151522,
    0.0721750
  ],
  [
    0.0193339,
    0.1191920,
    0.9503041
  ]
];

function linearRgbToXyz(param) {
  return multiplyMatrix(partial_arg, param);
}

var partial_arg$1 = [
  [
    0.4865709486482162,
    0.26566769316909306,
    0.1982172852343625
  ],
  [
    0.2289745640697488,
    0.6917385218365064,
    0.079286914093745
  ],
  [
    0.0000000000000000,
    0.04511338185890264,
    1.043944368900976
  ]
];

function linearP3ToXyz(param) {
  return multiplyMatrix(partial_arg$1, param);
}

var partial_arg$2 = [
  [
    1.0478112,
    0.0228866,
    -0.0501270
  ],
  [
    0.0295424,
    0.9904844,
    -0.0170491
  ],
  [
    -0.0092345,
    0.0150436,
    0.7521316
  ]
];

function d65ToD50(param) {
  return multiplyMatrix(partial_arg$2, param);
}

var e = 216 / 24389;

var k = 24389 / 27;

function xyzToLab(param) {
  var xyz_0 = param[0] / 0.96422;
  var xyz_1 = param[1] / 1;
  var xyz_2 = param[2] / 0.82521;
  var xyz = [
    xyz_0,
    xyz_1,
    xyz_2
  ];
  var match = mapTriple((function (v) {
          if (v > e) {
            return Math.pow(v, 1 / 3);
          } else {
            return (k * v + 16) / 116;
          }
        }), xyz);
  var f1 = match[1];
  return [
          116 * f1 - 16,
          500 * (match[0] - f1),
          200 * (f1 - match[2])
        ];
}

function labToXyz(param) {
  var l = param[0];
  var f1 = (l + 16) / 116;
  var f0 = param[1] / 500 + f1;
  var f2 = f1 - param[2] / 200;
  var x = Math.pow(f0, 3) > e ? Math.pow(f0, 3) : (116 * f0 - 16) / k;
  var y = l > k * e ? Math.pow((l + 16) / 116, 3) : l / k;
  var z = Math.pow(f2, 3) > e ? Math.pow(f2, 3) : (116 * f2 - 16) / k;
  return [
          x * 0.96422,
          y * 1,
          z * 0.82521
        ];
}

var partial_arg$3 = [
  [
    0.9555766,
    -0.0230393,
    0.0631636
  ],
  [
    -0.0282895,
    1.0099416,
    0.0210077
  ],
  [
    0.0122982,
    -0.0204830,
    1.3299098
  ]
];

function d50ToD65(param) {
  return multiplyMatrix(partial_arg$3, param);
}

var partial_arg$4 = [
  [
    3.2404542,
    -1.5371385,
    -0.4985314
  ],
  [
    -0.9692660,
    1.8760108,
    0.0415560
  ],
  [
    0.0556434,
    -0.2040259,
    1.0572252
  ]
];

function xyzToRGB(param) {
  return multiplyMatrix(partial_arg$4, param);
}

var partial_arg$5 = [
  [
    2.493496911941425,
    -0.9313836179191239,
    -0.40271078445071684
  ],
  [
    -0.8294889695615747,
    1.7626640603183463,
    0.023624685841943577
  ],
  [
    0.03584583024378447,
    -0.07617238926804182,
    0.9568845240076872
  ]
];

function xyzToP3(param) {
  return multiplyMatrix(partial_arg$5, param);
}

function fromRGB(_x) {
  while(true) {
    var x = _x;
    if (x.NAME === "rgb") {
      var match = x.VAL;
      _x = {
        NAME: "rgba",
        VAL: [
          match[0],
          match[1],
          match[2],
          1
        ]
      };
      continue ;
    }
    var match$1 = x.VAL;
    var param = mapTriple((function (param) {
            return toFixed(4, param);
          }), xyzToLab(d65ToD50(linearRgbToXyz(mapTriple(srgbLinear, mapTriple((function (prim) {
                                return prim;
                              }), [
                              match$1[0],
                              match$1[1],
                              match$1[2]
                            ]))))));
    return {
            NAME: "lab",
            VAL: [
              param[0],
              param[1],
              param[2],
              match$1[3]
            ]
          };
  };
}

function toRGB(x) {
  var match = x.VAL;
  var param = mapTriple(rgbClamp, mapTriple(intOfFloat, mapTriple(srgbGamma, xyzToRGB(d50ToD65(labToXyz([
                            match[0],
                            match[1],
                            match[2]
                          ]))))));
  return {
          NAME: "rgba",
          VAL: [
            param[0],
            param[1],
            param[2],
            match[3]
          ]
        };
}

function fromP3(x) {
  var match = x.VAL;
  var param = mapTriple((function (param) {
          return toFixed(4, param);
        }), xyzToLab(d65ToD50(linearP3ToXyz(mapTriple(rgbLinear, [
                        match[0],
                        match[1],
                        match[2]
                      ])))));
  return {
          NAME: "lab",
          VAL: [
            param[0],
            param[1],
            param[2],
            match[3]
          ]
        };
}

function toP3(x) {
  var match = x.VAL;
  var param = mapTriple((function (param) {
          return toFixed(3, param);
        }), mapTriple(p3Clamp, mapTriple(rgbGamma, xyzToP3(d50ToD65(labToXyz([
                            match[0],
                            match[1],
                            match[2]
                          ]))))));
  return {
          NAME: "p3",
          VAL: [
            param[0],
            param[1],
            param[2],
            match[3]
          ]
        };
}

function toLab(x) {
  if (typeof x === "object") {
    if (x.NAME === "lab") {
      return x;
    } else {
      return fromRGB(x);
    }
  } else {
    return {
            NAME: "lab",
            VAL: [
              0,
              0,
              0,
              0
            ]
          };
  }
}

function toCss(x) {
  if (x.VAL[3] !== 0) {
    return toRGB(x);
  } else {
    return "transparent";
  }
}

function lightness(v, x) {
  var match = x.VAL;
  return {
          NAME: "lab",
          VAL: [
            clamp(0, 100, v),
            match[1],
            match[2],
            match[3]
          ]
        };
}

function lighten(factor, x) {
  var match = x.VAL;
  return {
          NAME: "lab",
          VAL: [
            clamp(0, 100, match[0] + factor),
            match[1],
            match[2],
            match[3]
          ]
        };
}

function darken(factor, c) {
  return lighten(Math.imul(factor, -1), c);
}

function getTuple(x) {
  var match = x.VAL;
  return [
          match[0],
          match[1],
          match[2],
          match[3]
        ];
}

function mix(f, lab1, lab2) {
  var match = getTuple(lab1);
  var match$1 = getTuple(lab2);
  var match$2 = labToXyz([
        match[0],
        match[1],
        match[2]
      ]);
  var z1 = match$2[2];
  var y1 = match$2[1];
  var x1 = match$2[0];
  var match$3 = labToXyz([
        match$1[0],
        match$1[1],
        match$1[2]
      ]);
  var param = xyzToLab([
        x1 + f * (match$3[0] - x1),
        y1 + f * (match$3[1] - y1),
        z1 + f * (match$3[2] - z1)
      ]);
  return {
          NAME: "lab",
          VAL: [
            param[0],
            param[1],
            param[2],
            (match[3] + match$1[3]) / 2
          ]
        };
}

function luminance_x(x) {
  var x1 = x / 255;
  if (x1 <= 0.03928) {
    return x1 / 12.92;
  } else {
    return Math.pow((x1 + 0.055) / 1.055, 2.4);
  }
}

function luminance(x) {
  return x.VAL[0];
}

function highlight(baseColor, factor) {
  var baseL = luminance(baseColor);
  return function (x) {
    return lighten(Math.imul(baseL > 50 && x.VAL[0] + factor > 100 ? -1 : 1, factor), x);
  };
}

function contrast(lab1, lab2) {
  var lum1 = luminance(lab1);
  var lum2 = luminance(lab2);
  return 21 * (0.01 * Math.abs(lum1 - lum2));
}

function getContrastLimit(x) {
  if (x[0]) {
    if (x[1]) {
      return 4.5;
    } else {
      return 7;
    }
  } else if (x[1]) {
    return 3;
  } else {
    return 4.5;
  }
}

function isContrastOk(levelOpt, sizeOpt, lab1, lab2) {
  var level = levelOpt !== undefined ? levelOpt : /* AA */0;
  var size = sizeOpt !== undefined ? sizeOpt : /* Normal */0;
  return contrast(lab1, lab2) > getContrastLimit([
              level,
              size
            ]);
}

function getContrastColor(lightColorOpt, darkColorOpt, tint, lab) {
  var lightColor = lightColorOpt !== undefined ? lightColorOpt : ({
        NAME: "lab",
        VAL: [
          100,
          0,
          0,
          1
        ]
      });
  var darkColor = darkColorOpt !== undefined ? darkColorOpt : ({
        NAME: "lab",
        VAL: [
          10,
          0,
          0,
          1
        ]
      });
  var baseColor = contrast(lab, darkColor) > contrast(lab, lightColor) ? darkColor : lightColor;
  if (tint === undefined) {
    return baseColor;
  }
  var match = tint.VAL;
  return {
          NAME: "lab",
          VAL: [
            luminance(baseColor),
            match[1],
            match[2],
            match[3]
          ]
        };
}

var d50White = [
  0.96422,
  1,
  0.82521
];

export {
  InvalidValue ,
  toPrecision ,
  toFixed ,
  clamp ,
  multiplyMatrix ,
  mapTriple ,
  intOfFloat ,
  rgbClamp ,
  p3Clamp ,
  toInt ,
  rgbGamma ,
  srgbGamma ,
  rgbLinear ,
  srgbLinear ,
  linearRgbToXyz ,
  linearP3ToXyz ,
  d65ToD50 ,
  e ,
  k ,
  d50White ,
  xyzToLab ,
  labToXyz ,
  d50ToD65 ,
  xyzToRGB ,
  xyzToP3 ,
  fromRGB ,
  toRGB ,
  fromP3 ,
  toP3 ,
  toLab ,
  toCss ,
  lightness ,
  lighten ,
  darken ,
  getTuple ,
  mix ,
  luminance_x ,
  luminance ,
  highlight ,
  contrast ,
  getContrastLimit ,
  isContrastOk ,
  getContrastColor ,
  
}
/* No side effect */
