// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Css from "./Css.bs.js";
import * as Lab from "./Lab.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";
import * as UnsafeCreateReactElement from "./UnsafeCreateReactElement.bs.js";

var InvalidValue = Caml_exceptions.create("Core.InvalidValue");

function identity(a) {
  return a;
}

var Layout = {};

var Space = {};

var Type = {};

var Color = {};

function responsive(_theme, param) {
  return {
          hd: Css.media("(min-width: 30em)", param[1]),
          tl: {
            hd: Css.media("(min-width: 50em)", param[2]),
            tl: param[0]
          }
        };
}

var context = React.createContext(/* body */-1055163742);

var provider = context.Provider;

function Core$BackgroundColorContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  var updateVal = function (value) {
    return UnsafeCreateReactElement.create(provider, {
                value: value,
                children: children
              });
  };
  if (typeof value === "number") {
    if (value !== 582626130) {
      return updateVal(value);
    } else {
      return children;
    }
  } else if (value.HASH !== 563521374 || value.VAL[0] > 0.49) {
    return updateVal(value);
  } else {
    return children;
  }
}

var Provider = {
  make: Core$BackgroundColorContext$Provider
};

var BackgroundColorContext = {
  defaultColor: /* body */-1055163742,
  context: context,
  provider: provider,
  Provider: Provider
};

function alphaFn(alpha, lab) {
  var match = lab.VAL;
  return {
          HASH: /* lab */5392461,
          VAL: [
            match[0],
            match[1],
            match[2],
            alpha
          ]
        };
}

function isLight(body) {
  return Lab.luminance(body) > 50;
}

function backgroundColor(theme, alpha, highlight, v) {
  var highlightFn = highlight !== undefined ? Lab.highlight(theme.colors.body, highlight) : identity;
  var tmp;
  if (typeof v === "number") {
    if (v >= 320405322) {
      if (v >= 500402061) {
        if (v >= 824326132) {
          if (v >= 944645571) {
            tmp = theme.colors.success;
          } else {
            switch (v - 824326132 | 0) {
              case 0 :
                  tmp = theme.colors.bodyUp1;
                  break;
              case 1 :
                  tmp = theme.colors.bodyUp2;
                  break;
              case 2 :
                  tmp = theme.colors.bodyUp3;
                  break;
              
            }
          }
        } else if (v >= 582626130) {
          tmp = {
            HASH: /* lab */5392461,
            VAL: [
              100,
              100,
              100,
              0
            ]
          };
        } else {
          switch (v - 500402061 | 0) {
            case 0 :
                tmp = theme.colors.bodyDown1;
                break;
            case 1 :
                tmp = theme.colors.bodyDown2;
                break;
            case 2 :
                tmp = theme.colors.bodyDown3;
                break;
            
          }
        }
      } else {
        tmp = v >= 320405323 ? theme.colors.brand2 : theme.colors.brand1;
      }
    } else {
      tmp = v >= -349573817 ? (
          v >= 58474434 ? (
              v >= 164354652 ? theme.colors.warning : theme.colors.primary
            ) : (
              v >= -215364664 ? theme.colors.error : theme.colors.neutral
            )
        ) : (
          v >= -499495052 ? theme.colors.secondary : theme.colors.body
        );
    }
  } else {
    var variant = v.HASH;
    if (variant !== 534360428) {
      if (variant >= 563521374) {
        var match = v.VAL;
        tmp = backgroundColor(theme, match[0], undefined, match[1]);
      } else {
        var match$1 = v.VAL;
        tmp = backgroundColor(theme, undefined, match$1[0], match$1[1]);
      }
    } else {
      tmp = v.VAL;
    }
  }
  return (
            alpha !== undefined ? (function (param) {
                  return alphaFn(alpha, param);
                }) : identity
          )(Curry._1(highlightFn, tmp));
}

function textColor(theme, alpha, highlight, v) {
  var highlightFn = highlight !== undefined ? Lab.highlight(theme.colors.body, highlight) : identity;
  return (
            alpha !== undefined ? (function (param) {
                  return alphaFn(alpha, param);
                }) : identity
          )(Curry._1(highlightFn, typeof v === "number" ? (
                    v >= -215364663 ? (
                        v >= 164354653 || v !== 58474434 ? theme.colors.bodyText : theme.colors.primary
                      ) : (
                        v >= -571635531 || !(v !== -1055163742 && v >= -571635532) ? theme.colors.bodyText : theme.colors.quiet
                      )
                  ) : (
                    v.HASH !== 534360428 ? theme.colors.bodyText : v.VAL
                  )));
}

function fontFamily(theme, v) {
  return $$String.concat(", ", v >= 4847913 ? (
                v >= 272307608 ? theme.fonts.title : theme.fonts.alt
              ) : (
                v >= -933176285 ? theme.fonts.mono : theme.fonts.body
              ));
}

function fontSize(theme, n) {
  return Math.pow(theme.fontScale, n) * theme.baseFontSize | 0;
}

function fontWeight(param, v) {
  if (v >= -81801163) {
    if (v >= -20425611) {
      if (v >= 812216871) {
        return /* normal */812216871;
      } else {
        return /* medium */-20425611;
      }
    } else if (v >= -21160922) {
      return /* extraLight */-21160922;
    } else {
      return /* extraBold */-81801163;
    }
  } else if (v >= -184774442) {
    return /* light */-184774442;
  } else {
    return /* bold */-1055161979;
  }
}

function findMinStep(test, _i) {
  while(true) {
    var i = _i;
    if (Curry._1(test, i)) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function space(negativeOpt, theme, adjustPxOpt, v) {
  var negative = negativeOpt !== undefined ? negativeOpt : false;
  var adjustPx = adjustPxOpt !== undefined ? adjustPxOpt : 0;
  var length = function (v) {
    return Math.imul(theme.baseGridUnit, v) - adjustPx | 0;
  };
  var multiplier = negative ? -1 : 1;
  if (typeof v === "number") {
    if (v >= -731246395) {
      if (v >= 852175633) {
        if (v >= 958490248) {
          return length((multiplier << 1));
        } else {
          return length((multiplier << 2));
        }
      } else if (v >= -571633525) {
        return length(Math.imul(10, multiplier));
      } else {
        return 0;
      }
    } else if (v >= -892289378) {
      if (v >= -888522553) {
        return length((multiplier << 3));
      } else {
        return length(Math.imul(6, multiplier));
      }
    } else if (v >= -989320781) {
      return length((multiplier << 0));
    } else {
      return "auto";
    }
  }
  var variant = v.HASH;
  if (variant >= 120962938) {
    if (variant >= 561678025) {
      return length(Math.imul(v.VAL, multiplier));
    } else {
      return v.VAL;
    }
  }
  if (variant < -115156391) {
    return length(Math.imul(6, multiplier));
  }
  var pixels = v.VAL;
  var rem = Caml_int32.mod_(pixels, theme.baseGridUnit);
  var extra = rem === 0 ? 0 : 1;
  return Math.imul(Math.imul(Caml_int32.div(pixels, theme.baseGridUnit) + extra | 0, theme.baseGridUnit), multiplier);
}

function getPx(v) {
  if (typeof v === "number") {
    throw {
          RE_EXN_ID: InvalidValue,
          _1: "Not a pixel value",
          Error: new Error()
        };
  }
  if (v.HASH !== 25096) {
    throw {
          RE_EXN_ID: InvalidValue,
          _1: "Not a pixel value",
          Error: new Error()
        };
  }
  return v.VAL;
}

function lineHeight(theme, sizeOpt, extraHeightOpt, param) {
  var size = sizeOpt !== undefined ? sizeOpt : 0;
  var extraHeight = extraHeightOpt !== undefined ? extraHeightOpt : 0;
  var va = findMinStep((function (i) {
          return Math.imul(i, theme.baseGridUnit) > fontSize(theme, size) * 1.25;
        }), 0);
  return Math.imul(va + extraHeight | 0, theme.baseGridUnit);
}

var Private = {
  alphaFn: alphaFn,
  isLight: isLight,
  backgroundColor: backgroundColor,
  textColor: textColor,
  fontFamily: fontFamily,
  fontSize: fontSize,
  fontWeight: fontWeight,
  findMinStep: findMinStep,
  space: space,
  getPx: getPx,
  lineHeight: lineHeight
};

function createTheme(fontScaleOpt, baseFontSizeOpt, baseLightnessOpt, baseGridUnitOpt, borderRadiiOpt, fontsOpt, huesOpt, widthOpt, param) {
  var fontScale = fontScaleOpt !== undefined ? fontScaleOpt : 1.25;
  var baseFontSize = baseFontSizeOpt !== undefined ? baseFontSizeOpt : 16;
  var baseLightness = baseLightnessOpt !== undefined ? baseLightnessOpt : 70;
  var baseGridUnit = baseGridUnitOpt !== undefined ? baseGridUnitOpt : 4;
  var borderRadii = borderRadiiOpt !== undefined ? borderRadiiOpt : ({
        small: 5,
        medium: 8,
        large: 12
      });
  var fonts = fontsOpt !== undefined ? fontsOpt : ({
        body: {
          hd: "-apple-system",
          tl: {
            hd: "BlinkMacSystemFont",
            tl: {
              hd: "sans-serif",
              tl: /* [] */0
            }
          }
        },
        title: {
          hd: "-apple-system",
          tl: {
            hd: "BlinkMacSystemFont",
            tl: {
              hd: "sans-serif",
              tl: /* [] */0
            }
          }
        },
        mono: {
          hd: "Courier",
          tl: /* [] */0
        },
        alt: {
          hd: "-apple-system",
          tl: {
            hd: "BlinkMacSystemFont",
            tl: {
              hd: "sans-serif",
              tl: /* [] */0
            }
          }
        }
      });
  var hues = huesOpt !== undefined ? huesOpt : ({
        neutral: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                40,
                40,
                40
              ]
            }),
        primary: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                18,
                120,
                240
              ]
            }),
        secondary: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                100,
                100,
                100
              ]
            }),
        success: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                44,
                173,
                2
              ]
            }),
        warning: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                214,
                135,
                5
              ]
            }),
        error: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                230,
                26,
                26
              ]
            }),
        brand1: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                213,
                54,
                222
              ]
            }),
        brand2: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                54,
                213,
                222
              ]
            }),
        body: {
          HASH: /* lab */5392461,
          VAL: [
            10,
            0,
            0,
            1
          ]
        },
        bodyDown1: {
          HASH: /* lab */5392461,
          VAL: [
            98,
            0,
            0,
            1
          ]
        },
        bodyDown2: {
          HASH: /* lab */5392461,
          VAL: [
            96,
            0,
            0,
            1
          ]
        },
        bodyDown3: {
          HASH: /* lab */5392461,
          VAL: [
            94,
            0,
            0,
            1
          ]
        },
        bodyUp1: {
          HASH: /* lab */5392461,
          VAL: [
            100,
            0,
            0,
            1
          ]
        },
        bodyUp2: {
          HASH: /* lab */5392461,
          VAL: [
            100,
            0,
            0,
            1
          ]
        },
        bodyUp3: {
          HASH: /* lab */5392461,
          VAL: [
            100,
            0,
            0,
            1
          ]
        },
        bodyText: {
          HASH: /* lab */5392461,
          VAL: [
            10,
            0,
            0,
            1
          ]
        },
        quiet: Lab.fromRGB({
              HASH: /* rgb */5692173,
              VAL: [
                130,
                130,
                130
              ]
            })
      });
  var width = widthOpt !== undefined ? widthOpt : 960;
  var colors_neutral = Lab.lightness(80, hues.neutral);
  var colors_primary = Lab.lightness(baseLightness, hues.primary);
  var colors_secondary = Lab.lightness(baseLightness, hues.secondary);
  var colors_success = Lab.lightness(baseLightness, hues.success);
  var colors_warning = Lab.lightness(baseLightness, hues.warning);
  var colors_error = Lab.lightness(baseLightness, hues.error);
  var colors_brand1 = Lab.lightness(baseLightness, hues.brand1);
  var colors_brand2 = Lab.lightness(baseLightness, hues.brand2);
  var colors_body = hues.body;
  var colors_bodyDown1 = hues.bodyDown1;
  var colors_bodyDown2 = hues.bodyDown2;
  var colors_bodyDown3 = hues.bodyDown3;
  var colors_bodyUp1 = hues.bodyUp1;
  var colors_bodyUp2 = hues.bodyUp2;
  var colors_bodyUp3 = hues.bodyUp3;
  var colors_bodyText = hues.bodyText;
  var colors_quiet = hues.quiet;
  var colors = {
    neutral: colors_neutral,
    primary: colors_primary,
    secondary: colors_secondary,
    success: colors_success,
    warning: colors_warning,
    error: colors_error,
    brand1: colors_brand1,
    brand2: colors_brand2,
    body: colors_body,
    bodyDown1: colors_bodyDown1,
    bodyDown2: colors_bodyDown2,
    bodyDown3: colors_bodyDown3,
    bodyUp1: colors_bodyUp1,
    bodyUp2: colors_bodyUp2,
    bodyUp3: colors_bodyUp3,
    bodyText: colors_bodyText,
    quiet: colors_quiet
  };
  return {
          colors: colors,
          fonts: fonts,
          fontScale: fontScale,
          baseFontSize: baseFontSize,
          baseGridUnit: baseGridUnit,
          width: width,
          borderRadii: borderRadii
        };
}

var theme = createTheme(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

var DefaultTheme = {
  theme: theme
};

var currentTheme = {
  contents: theme
};

function setTheme(theme) {
  currentTheme.contents = theme;
  
}

function getTheme(param) {
  return currentTheme.contents;
}

function getColor(highlight, alpha, c) {
  return Lab.toCss(backgroundColor(currentTheme.contents, alpha, highlight, c));
}

function getLabColor(highlight, alpha, c) {
  return backgroundColor(currentTheme.contents, alpha, highlight, c);
}

function getTextColor(highlightOpt, c) {
  var highlight = highlightOpt !== undefined ? highlightOpt : 0;
  return Lab.toCss(textColor(currentTheme.contents, undefined, highlight, c));
}

function getBorderRadius(s) {
  var theme = currentTheme.contents;
  if (s !== -922086728) {
    if (s >= -20425611) {
      if (s >= -9768761) {
        return theme.borderRadii.small;
      } else {
        return theme.borderRadii.medium;
      }
    } else if (s >= -272944197) {
      return theme.borderRadii.large;
    } else {
      return 200;
    }
  } else {
    return 0;
  }
}

function getSpace(negative, adjustPxOpt, s) {
  var adjustPx = adjustPxOpt !== undefined ? adjustPxOpt : 0;
  return space(negative, currentTheme.contents, adjustPx, s);
}

function getFontFamily(f) {
  return fontFamily(currentTheme.contents, f);
}

function getFontSize(f) {
  return fontSize(currentTheme.contents, f);
}

function getFontWeight(f) {
  return fontWeight(currentTheme.contents, f);
}

function getLineHeight(fontSizeOpt, extraHeightOpt, param) {
  var fontSize = fontSizeOpt !== undefined ? fontSizeOpt : 0;
  var extraHeight = extraHeightOpt !== undefined ? extraHeightOpt : 0;
  return lineHeight(currentTheme.contents, fontSize, extraHeight, undefined);
}

function getIsLight(param) {
  return Lab.luminance(currentTheme.contents.colors.body) > 50;
}

function useMatchesMedia(query) {
  var mql = window.matchMedia(query);
  var match = React.useState(function () {
        return mql.matches;
      });
  var setValue = match[1];
  React.useLayoutEffect((function () {
          var handler = mql.addListener(function (param) {
                return Curry._1(setValue, (function (param) {
                              return mql.matches;
                            }));
              });
          return (function (param) {
                    return mql.removeListener(handler);
                  });
        }), []);
  return match[0];
}

var Styles = {
  getColor: getColor,
  getLabColor: getLabColor,
  getTextColor: getTextColor,
  getBorderRadius: getBorderRadius,
  getSpace: getSpace,
  getFontFamily: getFontFamily,
  getFontSize: getFontSize,
  getFontWeight: getFontWeight,
  getLineHeight: getLineHeight,
  getIsLight: getIsLight,
  useMatchesMedia: useMatchesMedia
};

export {
  InvalidValue ,
  identity ,
  Layout ,
  Space ,
  Type ,
  Color ,
  responsive ,
  BackgroundColorContext ,
  Private ,
  createTheme ,
  DefaultTheme ,
  currentTheme ,
  setTheme ,
  getTheme ,
  Styles ,
  
}
/* context Not a pure module */
