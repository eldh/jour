// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "./Css.bs.js";
import * as Lab from "./Lab.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.mjs";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.mjs";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.mjs";
import * as UnsafeCreateReactElement from "./UnsafeCreateReactElement.bs.js";

var InvalidValue = /* @__PURE__ */Caml_exceptions.create("Core.InvalidValue");

function identity(a) {
  return a;
}

var Layout = {};

var Space = {};

var Type = {};

var Color = {};

function responsive(_theme, param) {
  return {
          hd: Css.media("(min-width: 30em)", param[1]),
          tl: {
            hd: Css.media("(min-width: 50em)", param[2]),
            tl: param[0]
          }
        };
}

var context = React.createContext("body");

var provider = context.Provider;

function Core$BackgroundColorContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  var updateVal = function (value) {
    return UnsafeCreateReactElement.create(provider, {
                value: value,
                children: children
              });
  };
  if (typeof value === "string") {
    if (value === "transparent") {
      return children;
    } else {
      return updateVal(value);
    }
  } else if (value.NAME === "alpha" && value.VAL[0] <= 0.49) {
    return children;
  } else {
    return updateVal(value);
  }
}

var Provider = {
  make: Core$BackgroundColorContext$Provider
};

var BackgroundColorContext = {
  defaultColor: "body",
  context: context,
  provider: provider,
  Provider: Provider
};

function alphaFn(alpha, lab) {
  var match = lab.VAL;
  return {
          NAME: "lab",
          VAL: [
            match[0],
            match[1],
            match[2],
            alpha
          ]
        };
}

function isLight(body) {
  return Lab.luminance(body) > 50;
}

function backgroundColor(theme, alpha, highlight, v) {
  var highlightFn = highlight !== undefined ? Lab.highlight(theme.colors.body, highlight) : identity;
  var tmp;
  if (typeof v === "string") {
    tmp = v === "secondary" ? theme.colors.secondary : (
        v === "neutral" ? theme.colors.neutral : (
            v === "error" ? theme.colors.error : (
                v === "primary" ? theme.colors.primary : (
                    v === "warning" ? theme.colors.warning : (
                        v === "brand1" ? theme.colors.brand1 : (
                            v === "brand2" ? theme.colors.brand2 : (
                                v === "bodyDown1" ? theme.colors.bodyDown1 : (
                                    v === "bodyDown2" ? theme.colors.bodyDown2 : (
                                        v === "bodyDown3" ? theme.colors.bodyDown3 : (
                                            v === "transparent" ? ({
                                                  NAME: "lab",
                                                  VAL: [
                                                    100,
                                                    100,
                                                    100,
                                                    0
                                                  ]
                                                }) : (
                                                v === "bodyUp1" ? theme.colors.bodyUp1 : (
                                                    v === "bodyUp2" ? theme.colors.bodyUp2 : (
                                                        v === "bodyUp3" ? theme.colors.bodyUp3 : (
                                                            v === "success" ? theme.colors.success : theme.colors.body
                                                          )
                                                      )
                                                  )
                                              )
                                          )
                                      )
                                  )
                              )
                          )
                      )
                  )
              )
          )
      );
  } else {
    var variant = v.NAME;
    if (variant === "unsafeCustomColor") {
      tmp = v.VAL;
    } else if (variant === "alpha") {
      var match = v.VAL;
      tmp = backgroundColor(theme, match[0], undefined, match[1]);
    } else {
      var match$1 = v.VAL;
      tmp = backgroundColor(theme, undefined, match$1[0], match$1[1]);
    }
  }
  return (
            alpha !== undefined ? (function (param) {
                  return alphaFn(alpha, param);
                }) : identity
          )(Curry._1(highlightFn, tmp));
}

function textColor(theme, alpha, highlight, v) {
  var highlightFn = highlight !== undefined ? Lab.highlight(theme.colors.body, highlight) : identity;
  return (
            alpha !== undefined ? (function (param) {
                  return alphaFn(alpha, param);
                }) : identity
          )(Curry._1(highlightFn, typeof v === "string" ? (
                    v === "success" || v === "brand2" || v === "brand1" || v === "warning" || v === "error" || v === "secondary" || v === "body" ? theme.colors.bodyText : (
                        v === "quiet" ? theme.colors.quiet : (
                            v === "faint" ? theme.colors.faint : (
                                v === "primary" ? theme.colors.primary : theme.colors.bodyText
                              )
                          )
                      )
                  ) : (
                    v.NAME === "unsafeCustomColor" ? v.VAL : theme.colors.bodyText
                  )));
}

function fontFamily(theme, v) {
  return $$String.concat(", ", v === "mono" ? theme.fonts.mono : (
                v === "alt" ? theme.fonts.alt : (
                    v === "title" ? theme.fonts.title : theme.fonts.body
                  )
              ));
}

function fontSize(theme, n) {
  return Math.pow(theme.fontScale, n) * theme.baseFontSize | 0;
}

function fontWeight(param, v) {
  if (v === "light") {
    return "light";
  } else if (v === "extraBold") {
    return "extraBold";
  } else if (v === "extraLight") {
    return "extraLight";
  } else if (v === "medium") {
    return "medium";
  } else if (v === "normal") {
    return "normal";
  } else {
    return "bold";
  }
}

function findMinStep(test, _i) {
  while(true) {
    var i = _i;
    if (Curry._1(test, i)) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function space(negativeOpt, theme, adjustPxOpt, v) {
  var negative = negativeOpt !== undefined ? negativeOpt : false;
  var adjustPx = adjustPxOpt !== undefined ? adjustPxOpt : 0;
  var length = function (v) {
    return Math.imul(theme.baseGridUnit, v) - adjustPx | 0;
  };
  var multiplier = negative ? -1 : 1;
  if (typeof v === "string") {
    if (v === "half") {
      return length((multiplier << 0));
    } else if (v === "triple") {
      return length(Math.imul(6, multiplier));
    } else if (v === "quad") {
      return length((multiplier << 3));
    } else if (v === "noSpace") {
      return 0;
    } else if (v === "quint") {
      return length(Math.imul(10, multiplier));
    } else if (v === "double") {
      return length((multiplier << 2));
    } else if (v === "single") {
      return length((multiplier << 1));
    } else {
      return "auto";
    }
  }
  var variant = v.NAME;
  if (variant !== "closest") {
    if (variant === "unsafeCustomValue") {
      return v.VAL;
    } else if (variant === "number") {
      return length(Math.imul(v.VAL, multiplier));
    } else {
      return length(Math.imul(6, multiplier));
    }
  }
  var pixels = v.VAL;
  var rem = Caml_int32.mod_(pixels, theme.baseGridUnit);
  var extra = rem === 0 ? 0 : 1;
  return Math.imul(Math.imul(Caml_int32.div(pixels, theme.baseGridUnit) + extra | 0, theme.baseGridUnit), multiplier);
}

function getPx(v) {
  if (typeof v === "string") {
    throw {
          RE_EXN_ID: InvalidValue,
          _1: "Not a pixel value",
          Error: new Error()
        };
  }
  if (v.NAME === "px") {
    return v.VAL;
  }
  throw {
        RE_EXN_ID: InvalidValue,
        _1: "Not a pixel value",
        Error: new Error()
      };
}

function lineHeight(theme, sizeOpt, extraHeightOpt, param) {
  var size = sizeOpt !== undefined ? sizeOpt : 0;
  var extraHeight = extraHeightOpt !== undefined ? extraHeightOpt : 0;
  var va = findMinStep((function (i) {
          return Math.imul(i, theme.baseGridUnit) > fontSize(theme, size) * 1.25;
        }), 0);
  return Math.imul(va + extraHeight | 0, theme.baseGridUnit);
}

var Private = {
  alphaFn: alphaFn,
  isLight: isLight,
  backgroundColor: backgroundColor,
  textColor: textColor,
  fontFamily: fontFamily,
  fontSize: fontSize,
  fontWeight: fontWeight,
  findMinStep: findMinStep,
  space: space,
  getPx: getPx,
  lineHeight: lineHeight
};

function createTheme(fontScaleOpt, baseFontSizeOpt, baseLightnessOpt, baseGridUnitOpt, borderRadiiOpt, fontsOpt, huesOpt, widthOpt, param) {
  var fontScale = fontScaleOpt !== undefined ? fontScaleOpt : 1.25;
  var baseFontSize = baseFontSizeOpt !== undefined ? baseFontSizeOpt : 16;
  var baseLightness = baseLightnessOpt !== undefined ? baseLightnessOpt : 70;
  var baseGridUnit = baseGridUnitOpt !== undefined ? baseGridUnitOpt : 4;
  var borderRadii = borderRadiiOpt !== undefined ? borderRadiiOpt : ({
        small: 5,
        medium: 8,
        large: 12
      });
  var fonts = fontsOpt !== undefined ? fontsOpt : ({
        body: {
          hd: "System",
          tl: /* [] */0
        },
        title: {
          hd: "System",
          tl: /* [] */0
        },
        mono: {
          hd: "Menlo",
          tl: /* [] */0
        },
        alt: {
          hd: "Georgia",
          tl: /* [] */0
        }
      });
  var hues = huesOpt !== undefined ? huesOpt : ({
        neutral: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                40,
                40,
                40
              ]
            }),
        primary: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                18,
                120,
                240
              ]
            }),
        secondary: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                100,
                100,
                100
              ]
            }),
        success: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                44,
                173,
                2
              ]
            }),
        warning: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                214,
                135,
                5
              ]
            }),
        error: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                230,
                26,
                26
              ]
            }),
        brand1: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                213,
                54,
                222
              ]
            }),
        brand2: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                54,
                213,
                222
              ]
            }),
        body: {
          NAME: "lab",
          VAL: [
            1,
            0,
            0,
            1
          ]
        },
        bodyDown1: {
          NAME: "lab",
          VAL: [
            2,
            0,
            0,
            1
          ]
        },
        bodyDown2: {
          NAME: "lab",
          VAL: [
            1,
            0,
            0,
            1
          ]
        },
        bodyDown3: {
          NAME: "lab",
          VAL: [
            0,
            0,
            0,
            1
          ]
        },
        bodyUp1: {
          NAME: "lab",
          VAL: [
            15,
            0,
            0,
            1
          ]
        },
        bodyUp2: {
          NAME: "lab",
          VAL: [
            20,
            0,
            0,
            1
          ]
        },
        bodyUp3: {
          NAME: "lab",
          VAL: [
            25,
            0,
            0,
            1
          ]
        },
        bodyText: {
          NAME: "lab",
          VAL: [
            80,
            0,
            0,
            1
          ]
        },
        quiet: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                117,
                117,
                117
              ]
            }),
        faint: Lab.fromRGB({
              NAME: "rgb",
              VAL: [
                60,
                60,
                60
              ]
            })
      });
  var width = widthOpt !== undefined ? widthOpt : 960;
  var colors_neutral = Lab.lightness(80, hues.neutral);
  var colors_primary = Lab.lightness(baseLightness, hues.primary);
  var colors_secondary = Lab.lightness(baseLightness, hues.secondary);
  var colors_success = Lab.lightness(baseLightness, hues.success);
  var colors_warning = Lab.lightness(baseLightness, hues.warning);
  var colors_error = Lab.lightness(baseLightness, hues.error);
  var colors_brand1 = Lab.lightness(baseLightness, hues.brand1);
  var colors_brand2 = Lab.lightness(baseLightness, hues.brand2);
  var colors_body = hues.body;
  var colors_bodyDown1 = hues.bodyDown1;
  var colors_bodyDown2 = hues.bodyDown2;
  var colors_bodyDown3 = hues.bodyDown3;
  var colors_bodyUp1 = hues.bodyUp1;
  var colors_bodyUp2 = hues.bodyUp2;
  var colors_bodyUp3 = hues.bodyUp3;
  var colors_bodyText = hues.bodyText;
  var colors_quiet = hues.quiet;
  var colors_faint = hues.faint;
  var colors = {
    neutral: colors_neutral,
    primary: colors_primary,
    secondary: colors_secondary,
    success: colors_success,
    warning: colors_warning,
    error: colors_error,
    brand1: colors_brand1,
    brand2: colors_brand2,
    body: colors_body,
    bodyDown1: colors_bodyDown1,
    bodyDown2: colors_bodyDown2,
    bodyDown3: colors_bodyDown3,
    bodyUp1: colors_bodyUp1,
    bodyUp2: colors_bodyUp2,
    bodyUp3: colors_bodyUp3,
    bodyText: colors_bodyText,
    quiet: colors_quiet,
    faint: colors_faint
  };
  return {
          colors: colors,
          fonts: fonts,
          fontScale: fontScale,
          baseFontSize: baseFontSize,
          baseGridUnit: baseGridUnit,
          width: width,
          borderRadii: borderRadii
        };
}

var theme = createTheme(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

var DefaultTheme = {
  theme: theme
};

var currentTheme = {
  contents: theme
};

function setTheme(theme) {
  currentTheme.contents = theme;
  
}

function getTheme(param) {
  return currentTheme.contents;
}

function getColor(highlight, alpha, c) {
  return Lab.toCss(backgroundColor(currentTheme.contents, alpha, highlight, c));
}

function getLabColor(highlight, alpha, c) {
  return backgroundColor(currentTheme.contents, alpha, highlight, c);
}

function getTextColor(highlightOpt, c) {
  var highlight = highlightOpt !== undefined ? highlightOpt : 0;
  return Lab.toCss(textColor(currentTheme.contents, undefined, highlight, c));
}

function getBorderRadius(s) {
  var theme = currentTheme.contents;
  if (s === "none") {
    return 0;
  } else if (s === "large") {
    return theme.borderRadii.large;
  } else if (s === "medium") {
    return theme.borderRadii.medium;
  } else if (s === "small") {
    return theme.borderRadii.small;
  } else {
    return 200;
  }
}

function getSpace(negative, adjustPxOpt, s) {
  var adjustPx = adjustPxOpt !== undefined ? adjustPxOpt : 0;
  return space(negative, currentTheme.contents, adjustPx, s);
}

function getFontFamily(f) {
  return fontFamily(currentTheme.contents, f);
}

function getFontSize(f) {
  return fontSize(currentTheme.contents, f);
}

function getFontWeight(f) {
  return fontWeight(currentTheme.contents, f);
}

function getLineHeight(fontSizeOpt, extraHeightOpt, param) {
  var fontSize = fontSizeOpt !== undefined ? fontSizeOpt : 0;
  var extraHeight = extraHeightOpt !== undefined ? extraHeightOpt : 0;
  return lineHeight(currentTheme.contents, fontSize, extraHeight, undefined);
}

function getIsLight(param) {
  return Lab.luminance(currentTheme.contents.colors.body) > 50;
}

function useMatchesMedia(query) {
  var mql = window.matchMedia(query);
  var match = React.useState(function () {
        return mql.matches;
      });
  var setValue = match[1];
  React.useLayoutEffect((function () {
          var handler = mql.addListener(function (param) {
                return Curry._1(setValue, (function (param) {
                              return mql.matches;
                            }));
              });
          return (function (param) {
                    return mql.removeListener(handler);
                  });
        }), []);
  return match[0];
}

var Styles = {
  getColor: getColor,
  getLabColor: getLabColor,
  getTextColor: getTextColor,
  getBorderRadius: getBorderRadius,
  getSpace: getSpace,
  getFontFamily: getFontFamily,
  getFontSize: getFontSize,
  getFontWeight: getFontWeight,
  getLineHeight: getLineHeight,
  getIsLight: getIsLight,
  useMatchesMedia: useMatchesMedia
};

export {
  InvalidValue ,
  identity ,
  Layout ,
  Space ,
  Type ,
  Color ,
  responsive ,
  BackgroundColorContext ,
  Private ,
  createTheme ,
  DefaultTheme ,
  currentTheme ,
  setTheme ,
  getTheme ,
  Styles ,
  
}
/* context Not a pure module */
