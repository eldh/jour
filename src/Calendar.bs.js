// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "./revy/S.bs.js";
import * as Box from "./revy/Box.bs.js";
import * as $$Text from "./revy/Text.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.mjs";
import * as DateFns from "./DateFns.bs.js";
import * as DateFns$1 from "date-fns";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.mjs";
import * as Tablecloth from "tablecloth-bucklescript/bucklescript/src/tablecloth.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
import * as ReactNative from "react-native";

function now(param) {
  return new Date(Date.now());
}

function padMonthStart(date) {
  var startOfMonth = DateFns.startOfMonth(date);
  var diff = DateFns$1.differenceInCalendarDays(startOfMonth, DateFns.startOfWeek(startOfMonth));
  return Belt_Array.makeBy(diff, (function (i) {
                return DateFns$1.subDays(startOfMonth, diff - i | 0);
              }));
}

function padMonthEnd(date) {
  var endOfMonth = DateFns$1.startOfDay(DateFns.endOfMonth(date));
  var diff = DateFns$1.differenceInCalendarDays(DateFns.endOfWeek(endOfMonth), endOfMonth);
  return Belt_Array.makeBy(diff, (function (i) {
                return DateFns$1.startOfDay(DateFns$1.addDays(endOfMonth, i + 1 | 0));
              }));
}

var style = S.make({
      hd: S.width({
            NAME: "px",
            VAL: 28
          }),
      tl: {
        hd: S.alignItems("center"),
        tl: /* [] */0
      }
    });

function Calendar$Date(Props) {
  var date = Props.date;
  var isToday = Props.isToday;
  var isSameMonth = Props.isSameMonth;
  var isActive = Props.isActive;
  var onPress = Props.onPress;
  return React.createElement(ReactNative.TouchableOpacity, {
              activeOpacity: 0.7,
              focusedOpacity: 0.9,
              style: style,
              disabled: !isSameMonth || !isActive,
              onPress: onPress,
              children: isSameMonth ? React.createElement($$Text.make, {
                      weight: "_700",
                      color: isToday ? "primary" : (
                          isActive ? "body" : "faint"
                        ),
                      children: DateFns.format(date, "d")
                    }) : null
            });
}

var $$Date$1 = {
  style: style,
  make: Calendar$Date
};

var style$1 = S.make({
      hd: S.width({
            NAME: "px",
            VAL: 196
          }),
      tl: {
        hd: S.height({
              NAME: "px",
              VAL: 168
            }),
        tl: {
          hd: S.flexDirection("row"),
          tl: {
            hd: S.flexWrap("wrap"),
            tl: /* [] */0
          }
        }
      }
    });

function Calendar$Month(Props) {
  var month = Props.month;
  var today = Props.today;
  var activeDatesOpt = Props.activeDates;
  var onPressDate = Props.onPressDate;
  var activeDates = activeDatesOpt !== undefined ? activeDatesOpt : [];
  var monthLength = DateFns$1.getDaysInMonth(month);
  var monthStart = DateFns.startOfMonth(month);
  var daysInMonth = Belt_Array.makeBy(monthLength, (function (i) {
          return DateFns$1.setDate(monthStart, i + 1 | 0);
        }));
  var daysBefore = padMonthStart(month);
  var daysAfter = padMonthEnd(month);
  var allDays = Tablecloth.$$Array.concatenate([
        daysBefore,
        daysInMonth,
        daysAfter
      ]);
  return React.createElement(Box.make, {
              children: null
            }, React.createElement($$Text.make, {
                  weight: "bold",
                  children: $$String.capitalize(DateFns.format(month, "MMMM"))
                }), React.createElement(ReactNative.View, {
                  style: style$1,
                  children: Tablecloth.$$Array.map((function (d) {
                          return React.createElement(Calendar$Date, {
                                      date: d,
                                      isToday: DateFns$1.isSameDay(today, d),
                                      isSameMonth: DateFns$1.isSameMonth(month, d),
                                      isActive: Tablecloth.$$Array.any((function (param) {
                                              return DateFns$1.isSameDay(d, param);
                                            }), activeDates),
                                      onPress: (function (param) {
                                          return Curry._1(onPressDate, d);
                                        }),
                                      key: DateFns.format(d, "yyyy MM dd")
                                    });
                        }), allDays)
                }));
}

var Month = {
  style: style$1,
  make: Calendar$Month
};

function Calendar$Year(Props) {
  var year = Props.year;
  var today = Props.today;
  var activeDates = Props.activeDates;
  var onPressDate = Props.onPressDate;
  return React.createElement(Box.make, {
              padding: "half",
              width: {
                NAME: "px",
                VAL: 621
              },
              children: null
            }, React.createElement($$Text.make, {
                  weight: "_700",
                  size: 4,
                  children: DateFns.format(year, "yyyy")
                }), React.createElement(Box.make, {
                  style: S.make({
                        hd: S.width({
                              NAME: "px",
                              VAL: 621
                            }),
                        tl: /* [] */0
                      }),
                  wrap: "wrap",
                  direction: "row",
                  marginBottom: {
                    NAME: "number",
                    VAL: 48
                  },
                  children: Belt_Array.makeBy(12, (function (i) {
                          var month = DateFns$1.addMonths(year, i);
                          var tmp = {
                            month: month,
                            today: today,
                            onPressDate: onPressDate,
                            key: String(i)
                          };
                          if (activeDates !== undefined) {
                            tmp.activeDates = Caml_option.valFromOption(activeDates);
                          }
                          return React.createElement(Calendar$Month, tmp);
                        }))
                }));
}

var Year = {
  make: Calendar$Year
};

function Calendar(Props) {
  var onOpenDate = Props.onOpenDate;
  var diaryList = Props.diaryList;
  var today = new Date(Date.now());
  var firstDate = Tablecloth.$$Option.withDefault(today, Tablecloth.$$Option.map((function (d) {
              return DateFns.startOfYear(Tablecloth.List.foldLeft((function (param, memo) {
                                var date = param[1];
                                if (DateFns$1.isAfter(memo, date)) {
                                  return date;
                                } else {
                                  return memo;
                                }
                              }), today, d));
            }), diaryList));
  var allYears = Belt_Array.makeBy(DateFns$1.differenceInYears(today, firstDate) + 1 | 0, (function (i) {
          return DateFns$1.addYears(firstDate, i);
        }));
  var activeDates = Tablecloth.$$Option.map((function (d) {
          return Tablecloth.$$Array.from_list(Tablecloth.List.map((function (param) {
                            return param[1];
                          }), d));
        }), diaryList);
  var onPressDate = Curry.__1(onOpenDate);
  return React.createElement(ReactNative.ScrollView, {
              contentContainerStyle: S.make({
                    hd: S.alignItems("center"),
                    tl: /* [] */0
                  }),
              style: S.make({
                    hd: S.flexGrow(1),
                    tl: /* [] */0
                  }),
              children: Tablecloth.$$Array.map((function (year) {
                      return React.createElement(Calendar$Year, {
                                  year: year,
                                  today: today,
                                  activeDates: activeDates,
                                  onPressDate: onPressDate,
                                  key: DateFns.format(year, "yyyy")
                                });
                    }), allYears)
            });
}

var make = Calendar;

export {
  now ,
  padMonthStart ,
  padMonthEnd ,
  $$Date$1 as $$Date,
  Month ,
  Year ,
  make ,
  
}
/* style Not a pure module */
