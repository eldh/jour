// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Box from "./revy/Box.bs.js";
import * as $$Text from "./revy/Text.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Hooks from "./Hooks.bs.js";
import * as React from "react";
import * as Button from "./revy/Button.bs.js";
import * as Spacer from "./revy/Spacer.bs.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as DateFns from "./DateFns.bs.js";
import * as DiaryFs from "./DiaryFs.bs.js";
import * as $$Promise from "reason-promise/src/js/promise.js";
import * as TextArea from "./revy/TextArea.bs.js";
import * as DateFns$1 from "date-fns";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as DiaryList from "./DiaryList.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";

function now(param) {
  return new Date(Date.now());
}

function reducer(state, action) {
  if (action) {
    return {
            date: action._0,
            outOfDate: false
          };
  } else {
    return {
            date: state.date,
            outOfDate: true
          };
  }
}

var initialState_date = new Date(Date.now());

var initialState = {
  date: initialState_date,
  outOfDate: false
};

function useDiaryDate(param) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var match$1 = match[0];
  var date = match$1.date;
  Hooks.useInterval(2000, (function (param) {
          if (!DateFns$1.isSameDay(new Date(Date.now()), date)) {
            return Curry._1(dispatch, /* SetOutOfDate */0);
          }
          
        }), [date]);
  return [
          date,
          match$1.outOfDate ? (function (param) {
                return Curry._1(dispatch, /* SetCurrentDate */{
                            _0: new Date(Date.now())
                          });
              }) : undefined
        ];
}

function useDiaryText(date) {
  var match = React.useState(function () {
        return "";
      });
  var setValue = match[1];
  var value = match[0];
  React.useEffect((function () {
          $$Promise.get(DiaryFs.writeDiaryToFs(date, value, undefined), (function (e) {
                  if (!e.TAG) {
                    return ;
                  }
                  console.log("write to file error: ", e._0);
                  
                }));
          
        }), [value]);
  return [
          value,
          (function (v) {
              return Curry._1(setValue, (function (param) {
                            return v;
                          }));
            })
        ];
}

function useDiaryList(param) {
  return Hooks.useInterval(5000, (function (param) {
                return $$Promise.get(DiaryFs.getDiaryEntries(undefined), (function (res) {
                              if (res.TAG) {
                                console.log("Error fetching diary list: ", res._0);
                                return ;
                              }
                              Curry._1(DiaryList.apply, Belt_List.keepMap(res._0, (function (param) {
                                          var entry = DiaryList.makeEntry(param[0], param[1]);
                                          var _e = Curry._1(DiaryList.get, entry.id);
                                          if (_e !== undefined) {
                                            return ;
                                          } else {
                                            return {
                                                    TAG: /* Append */0,
                                                    _0: entry
                                                  };
                                          }
                                        })));
                              
                            }));
              }), []);
}

function Editor(Props) {
  var match = useDiaryDate(undefined);
  var date = match[0];
  var match$1 = useDiaryText(date);
  var setValue = match$1[1];
  useDiaryList(undefined);
  var v = DiaryList.use(undefined);
  console.log("DiaryList", Belt_List.toArray(v));
  return React.createElement(Box.make, {
              align: /* center */98248149,
              alignContent: /* center */98248149,
              grow: 1,
              padding: /* half */-989320781,
              height: {
                HASH: /* pct */5591841,
                VAL: 100
              },
              children: null
            }, Belt_Option.mapWithDefault(match[1], null, (function (cb) {
                    return React.createElement(Box.make, {
                                grow: 0,
                                children: React.createElement(Button.make, {
                                      onPress: (function (param) {
                                          Curry._1(setValue, "");
                                          return Curry._1(cb, undefined);
                                        }),
                                      children: "New date"
                                    })
                              });
                  })), React.createElement(Box.make, {
                  alignSelf: /* flexStart */662439529,
                  grow: 0,
                  children: React.createElement($$Text.make, {
                        color: /* quiet */-571635532,
                        fontFamily: /* mono */-933176285,
                        children: $$String.capitalize_ascii(DateFns.format(date, "eeee dd LLLL"))
                      })
                }), React.createElement(Spacer.make, {}), React.createElement(Box.make, {
                  backgroundColor: /* secondary */-499495052,
                  grow: 1,
                  width: {
                    HASH: /* px */25096,
                    VAL: 700
                  },
                  maxWidth: {
                    HASH: /* pct */5591841,
                    VAL: 100
                  },
                  children: React.createElement(TextArea.make, {
                        onChangeText: setValue,
                        value: match$1[0]
                      })
                }));
}

var make = Editor;

export {
  now ,
  reducer ,
  initialState ,
  useDiaryDate ,
  useDiaryText ,
  useDiaryList ,
  make ,
  
}
/* initialState Not a pure module */
