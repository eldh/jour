// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "./revy/S.bs.js";
import * as Box from "./revy/Box.bs.js";
import * as $$Text from "./revy/Text.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Hooks from "./Hooks.bs.js";
import * as React from "react";
import * as Button from "./revy/Button.bs.js";
import * as Spacer from "./revy/Spacer.bs.js";
import * as $$String from "bs-platform/lib/es6/string.mjs";
import * as DateFns from "./DateFns.bs.js";
import * as DiaryFs from "./DiaryFs.bs.js";
import * as $$Promise from "reason-promise/src/js/promise.bs.js";
import * as TextArea from "./revy/TextArea.bs.js";
import * as DateFns$1 from "date-fns";
import * as Belt_List from "bs-platform/lib/es6/belt_List.mjs";
import * as DiaryList from "./DiaryList.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as ReactNative from "react-native";

function now(param) {
  return new Date(Date.now());
}

function reducer(state, action) {
  if (action) {
    return {
            date: action._0,
            outOfDate: false
          };
  } else {
    return {
            date: state.date,
            outOfDate: true
          };
  }
}

var initialState_date = new Date(Date.now());

var initialState = {
  date: initialState_date,
  outOfDate: false
};

function useDiaryDate(param) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var match$1 = match[0];
  var date = match$1.date;
  Hooks.useInterval(2000, (function (param) {
          if (!DateFns$1.isSameDay(new Date(Date.now()), date)) {
            return Curry._1(dispatch, /* SetOutOfDate */0);
          }
          
        }), [date]);
  return [
          date,
          match$1.outOfDate ? (function (param) {
                return Curry._1(dispatch, /* SetCurrentDate */{
                            _0: new Date(Date.now())
                          });
              }) : undefined
        ];
}

function useDiaryText(date) {
  var match = React.useState(function () {
        return "";
      });
  var setValue = match[1];
  var value = match[0];
  var hasReadFileRef = React.useRef(false);
  React.useEffect((function () {
          console.log("read file");
          $$Promise.get(DiaryFs.readDiaryFromFs(date, undefined), (function (result) {
                  if (result.TAG === /* Ok */0) {
                    var content = result._0;
                    hasReadFileRef.current = true;
                    return Curry._1(setValue, (function (param) {
                                  return content;
                                }));
                  }
                  console.log("read  file error: ", result._0);
                  
                }));
          
        }), []);
  React.useEffect((function () {
          if (value !== "" && hasReadFileRef.current) {
            $$Promise.get(DiaryFs.writeDiaryToFs(date, value, undefined), (function (x) {
                    if (x.TAG === /* Ok */0) {
                      return ;
                    }
                    console.log("write to file error: ", x._0);
                    
                  }));
          }
          
        }), [value]);
  return [
          value,
          (function (v) {
              return Curry._1(setValue, (function (param) {
                            return v;
                          }));
            })
        ];
}

function useDiaryList(param) {
  return Hooks.useInterval(5000, (function (param) {
                return $$Promise.get(DiaryFs.getDiaryEntries(undefined), (function (res) {
                              if (res.TAG === /* Ok */0) {
                                var entries = res._0;
                                Curry._1(DiaryList.apply, Belt_List.keepMap(entries, (function (param) {
                                            var entry = DiaryList.makeEntry(param[0], param[1]);
                                            var _e = Curry._1(DiaryList.get, entry.id);
                                            if (_e !== undefined) {
                                              return ;
                                            } else {
                                              return {
                                                      TAG: /* Append */0,
                                                      _0: entry
                                                    };
                                            }
                                          })));
                                console.log("Got diary list: ", entries);
                                return ;
                              }
                              console.log("Error fetching diary list: ", res._0);
                              
                            }));
              }), []);
}

function Editor(Props) {
  var match = useDiaryDate(undefined);
  var date = match[0];
  var match$1 = useDiaryText(date);
  var setValue = match$1[1];
  useDiaryList(undefined);
  return React.createElement(ReactNative.View, {
              style: S.make({
                    hd: S.flexGrow(1),
                    tl: /* [] */0
                  }),
              children: React.createElement(Box.make, {
                    align: "center",
                    alignContent: "center",
                    grow: 1,
                    padding: "half",
                    height: {
                      NAME: "pct",
                      VAL: 100
                    },
                    children: React.createElement(Box.make, {
                          grow: 1,
                          width: {
                            NAME: "px",
                            VAL: 600
                          },
                          maxWidth: {
                            NAME: "pct",
                            VAL: 100
                          },
                          children: null
                        }, Belt_Option.mapWithDefault(match[1], null, (function (cb) {
                                return React.createElement(Box.make, {
                                            grow: 0,
                                            children: React.createElement(Button.make, {
                                                  onPress: (function (param) {
                                                      Curry._1(setValue, "");
                                                      return Curry._1(cb, undefined);
                                                    }),
                                                  children: "New date"
                                                })
                                          });
                              })), React.createElement(Box.make, {
                              alignSelf: "flexStart",
                              grow: 0,
                              children: React.createElement($$Text.make, {
                                    weight: "_700",
                                    color: "quiet",
                                    size: 4,
                                    children: $$String.capitalize_ascii(DateFns.format(date, "eeee dd LLLL"))
                                  })
                            }), React.createElement(Spacer.make, {}), React.createElement(ReactNative.ScrollView, {
                              contentContainerStyle: S.make({
                                    hd: S.width({
                                          NAME: "pct",
                                          VAL: 100
                                        }),
                                    tl: {
                                      hd: S.alignContent("stretch"),
                                      tl: {
                                        hd: S.justifyContent("center"),
                                        tl: {
                                          hd: S.alignItems("stretch"),
                                          tl: {
                                            hd: S.flexGrow(1),
                                            tl: {
                                              hd: S.backgroundColor("primary"),
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }),
                              style: S.make({
                                    hd: S.width({
                                          NAME: "pct",
                                          VAL: 100
                                        }),
                                    tl: {
                                      hd: S.flexGrow(1),
                                      tl: {
                                        hd: S.backgroundColor("primary"),
                                        tl: /* [] */0
                                      }
                                    }
                                  }),
                              children: React.createElement(TextArea.make, {
                                    onChangeText: setValue,
                                    value: match$1[0]
                                  })
                            }))
                  })
            });
}

var make = Editor;

export {
  now ,
  reducer ,
  initialState ,
  useDiaryDate ,
  useDiaryText ,
  useDiaryList ,
  make ,
  
}
/* initialState Not a pure module */
