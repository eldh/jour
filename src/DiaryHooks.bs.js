// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Hooks from "./Hooks.bs.js";
import * as React from "react";
import * as DateFns from "./DateFns.bs.js";
import * as DiaryFs from "./DiaryFs.bs.js";
import * as $$Promise from "reason-promise/src/js/promise.bs.js";
import * as DateFns$1 from "date-fns";

function useDiaryList(param) {
  var match = React.useState(function () {
        
      });
  var setState = match[1];
  Hooks.useInterval(5000, (function (param) {
          return $$Promise.get(DiaryFs.getDiaryEntries(undefined), (function (res) {
                        if (res.TAG === /* Ok */0) {
                          var entries = res._0;
                          return Curry._1(setState, (function (param) {
                                        return entries;
                                      }));
                        }
                        console.log("Error fetching diary list: ", res._0);
                        
                      }));
        }), []);
  return match[0];
}

function reducer(state, action) {
  if (action) {
    return {
            date: action._0,
            outOfDate: false
          };
  } else {
    return {
            date: state.date,
            outOfDate: true
          };
  }
}

var initialState_date = DateFns.now(undefined);

var initialState = {
  date: initialState_date,
  outOfDate: false
};

function useDiaryDate(param) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var match$1 = match[0];
  var date = match$1.date;
  Hooks.useInterval(2000, (function (param) {
          if (!DateFns$1.isSameDay(DateFns.now(undefined), date)) {
            return Curry._1(dispatch, /* SetOutOfDate */0);
          }
          
        }), [date]);
  return [
          date,
          match$1.outOfDate ? (function (param) {
                return Curry._1(dispatch, /* SetCurrentDate */{
                            _0: DateFns.now(undefined)
                          });
              }) : undefined
        ];
}

function useDiaryText(date) {
  var match = React.useState(function () {
        return "";
      });
  var setValue = match[1];
  var value = match[0];
  var hasReadFileRef = React.useRef(false);
  React.useEffect((function () {
          $$Promise.get(DiaryFs.readDiaryFromFs(date, undefined), (function (result) {
                  hasReadFileRef.current = true;
                  if (result.TAG === /* Ok */0) {
                    var content = result._0;
                    return Curry._1(setValue, (function (param) {
                                  return content;
                                }));
                  }
                  console.log("read file error: ", result._0);
                  
                }));
          
        }), []);
  React.useEffect((function () {
          if (value !== "" && hasReadFileRef.current) {
            $$Promise.get(DiaryFs.writeDiaryToFs(date, value, undefined), (function (x) {
                    if (x.TAG === /* Ok */0) {
                      return ;
                    }
                    console.log("write to file error: ", x._0);
                    
                  }));
          }
          
        }), [value]);
  return [
          value,
          (function (v) {
              return Curry._1(setValue, (function (param) {
                            return v;
                          }));
            })
        ];
}

export {
  useDiaryList ,
  reducer ,
  initialState ,
  useDiaryDate ,
  useDiaryText ,
  
}
/* initialState Not a pure module */
