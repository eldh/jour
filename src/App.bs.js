// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "./revy/S.bs.js";
import * as Lab from "./revy/Lab.bs.js";
import * as Core from "./revy/Core.bs.js";
import * as Arrow from "./Arrow.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Editor from "./Editor.bs.js";
import * as Reader from "./Reader.bs.js";
import * as DateFns from "./DateFns.bs.js";
import * as Calendar from "./Calendar.bs.js";
import * as DateFns$1 from "date-fns";
import * as DiaryHooks from "./DiaryHooks.bs.js";
import * as CalendarIcon from "./CalendarIcon.bs.js";
import * as NewDayButton from "./NewDayButton.bs.js";
import * as ReactNative from "react-native";

Core.setTheme(Core.createTheme(1.25, 14, 60, 4, {
          small: 2,
          medium: 4,
          large: 6
        }, {
          body: {
            hd: "System",
            tl: /* [] */0
          },
          title: {
            hd: "System",
            tl: /* [] */0
          },
          mono: {
            hd: "Menlo",
            tl: /* [] */0
          },
          alt: {
            hd: "Georgia",
            tl: /* [] */0
          }
        }, {
          neutral: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  40,
                  40,
                  40
                ]
              }),
          primary: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  18,
                  120,
                  240
                ]
              }),
          secondary: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  100,
                  100,
                  100
                ]
              }),
          success: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  44,
                  173,
                  2
                ]
              }),
          warning: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  214,
                  135,
                  5
                ]
              }),
          error: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  230,
                  26,
                  26
                ]
              }),
          brand1: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  213,
                  54,
                  222
                ]
              }),
          brand2: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  54,
                  213,
                  222
                ]
              }),
          body: {
            NAME: "lab",
            VAL: [
              1,
              0,
              0,
              1
            ]
          },
          bodyDown1: {
            NAME: "lab",
            VAL: [
              2,
              0,
              0,
              1
            ]
          },
          bodyDown2: {
            NAME: "lab",
            VAL: [
              1,
              0,
              0,
              1
            ]
          },
          bodyDown3: {
            NAME: "lab",
            VAL: [
              0,
              0,
              0,
              1
            ]
          },
          bodyUp1: {
            NAME: "lab",
            VAL: [
              15,
              0,
              0,
              1
            ]
          },
          bodyUp2: {
            NAME: "lab",
            VAL: [
              20,
              0,
              0,
              1
            ]
          },
          bodyUp3: {
            NAME: "lab",
            VAL: [
              25,
              0,
              0,
              1
            ]
          },
          bodyText: {
            NAME: "lab",
            VAL: [
              80,
              0,
              0,
              1
            ]
          },
          quiet: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  117,
                  117,
                  117
                ]
              }),
          faint: Lab.fromRGB({
                NAME: "rgb",
                VAL: [
                  60,
                  60,
                  60
                ]
              })
        }, 700, undefined));

function App$NavButton(Props) {
  var onPress = Props.onPress;
  var children = Props.children;
  return React.createElement(ReactNative.TouchableOpacity, {
              activeOpacity: 0.7,
              focusedOpacity: 0.9,
              style: S.make({
                    hd: S.padding("single"),
                    tl: {
                      hd: S.position("absolute"),
                      tl: {
                        hd: S.left({
                              NAME: "number",
                              VAL: 0
                            }),
                        tl: {
                          hd: S.zIndex(1),
                          tl: {
                            hd: S.top({
                                  NAME: "unsafeCustomValue",
                                  VAL: 24
                                }),
                            tl: {
                              hd: S.left({
                                    NAME: "unsafeCustomValue",
                                    VAL: -36
                                  }),
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    }
                  }),
              onPress: onPress,
              children: children
            });
}

var NavButton = {
  make: App$NavButton
};

var wrapperStyle = S.make({
      hd: S.backgroundColor({
            NAME: "unsafeCustomColor",
            VAL: {
              NAME: "lab",
              VAL: [
                0,
                0,
                0,
                0.5
              ]
            }
          }),
      tl: {
        hd: S.flex(1),
        tl: {
          hd: S.alignItems("center"),
          tl: /* [] */0
        }
      }
    });

var style = S.make({
      hd: S.flexGrow(1),
      tl: {
        hd: S.height({
              NAME: "pct",
              VAL: 100
            }),
        tl: {
          hd: S.paddingTop("double"),
          tl: /* [] */0
        }
      }
    });

function App(Props) {
  var match = React.useState(function () {
        return /* Editor */0;
      });
  var setRoute = match[1];
  var route = match[0];
  var diaryList = DiaryHooks.useDiaryList(undefined);
  return React.createElement(ReactNative.View, {
              style: wrapperStyle,
              children: null
            }, route === 0 ? React.createElement(NewDayButton.make, {}) : null, React.createElement(ReactNative.View, {
                  style: style,
                  children: null
                }, route === 0 ? React.createElement(App$NavButton, {
                        onPress: (function (param) {
                            return Curry._1(setRoute, (function (param) {
                                          return /* Calendar */1;
                                        }));
                          }),
                        children: React.createElement(CalendarIcon.make, {})
                      }) : React.createElement(App$NavButton, {
                        onPress: (function (param) {
                            var route$1 = typeof route === "number" ? /* Editor */0 : /* Calendar */1;
                            return Curry._1(setRoute, (function (param) {
                                          return route$1;
                                        }));
                          }),
                        children: React.createElement(Arrow.make, {})
                      }), typeof route === "number" ? (
                    route !== 0 ? React.createElement(Calendar.make, {
                            onOpenDate: (function (date) {
                                var route = DateFns$1.isSameDay(date, DateFns.now(undefined)) ? /* Editor */0 : /* Reader */({
                                      _0: date
                                    });
                                return Curry._1(setRoute, (function (param) {
                                              return route;
                                            }));
                              }),
                            diaryList: diaryList
                          }) : React.createElement(Editor.make, {})
                  ) : React.createElement(Reader.make, {
                        date: route._0
                      })));
}

var make = App;

export {
  NavButton ,
  wrapperStyle ,
  style ,
  make ,
  
}
/*  Not a pure module */
